{"ast":null,"code":"var _jsxFileName = \"/home/enzo/dev/projects/chasacademy/current/style/src/components/Weather.jsx\";\nimport React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport Forecast from \"./Forecast\";\nimport { getCountry } from \"../services/citiesService\";\n\nclass Weather extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temperature: \"\",\n      tempMax: \"\",\n      tempMin: \"\",\n      city: \"\",\n      cityId: 2673730,\n      country: \"\",\n      humidity: \"\",\n      wind: \"\",\n      description: \"\",\n      sunrise: \"\",\n      sunset: \"\",\n      icon: \"\",\n      celsius: true,\n      fahrenheit: false,\n      error: \"\",\n      forecastClass: \"forecast-container-hidden\",\n      lat: undefined,\n      lon: undefined\n    };\n\n    this.getPosition = position => {\n      this.setState({\n        lat: position.coords.latitude,\n        lon: position.coords.longitude\n      });\n      console.log(\"lat\", this.state.lat);\n    };\n\n    this.getWeather = async (lat, lon) => {\n      try {\n        let fetchUrl = \"\";\n\n        if (lat && lon) {\n          fetchUrl = `//api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${config.API_KEY}`;\n          console.log(\"fetchUrl.using.latlon:\", fetchUrl);\n        } else if (!this.props.cityId) {\n          fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.state.cityId}&appid=${config.API_KEY}`;\n          console.log(\"fetchUrl.using.stockholm:\", fetchUrl);\n        } else {\n          fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.props.cityId}&appid=${config.API_KEY}`;\n          this.setState({\n            cityId: this.props.cityId\n          });\n          console.log(\"fetchUrl.from.props:\", fetchUrl);\n        }\n\n        const api = await fetch(fetchUrl);\n        const data = await api.json(); // const data = require(`../assets/stockholm.json`);\n\n        if (data) {\n          this.setState({\n            lat: lat,\n            lon: lon,\n            city: data.name,\n            country: getCountry(data.sys.country),\n            temperature: Math.round(data.main.temp - 273.15),\n            tempMax: Math.round(data.main.temp_max - 273.15),\n            tempMin: Math.round(data.main.temp_min - 273.15),\n            humidity: data.main.humidity,\n            wind: data.wind.speed,\n            description: data.weather[0].description,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            icon: data.weather[0].icon,\n            error: \"\"\n          });\n        }\n      } catch (e) {\n        console.log(\"Error in getWeather function of Weather component.\", e);\n      }\n    };\n\n    this.displayF = () => {\n      this.setState({\n        celsius: false,\n        fahrenheit: true,\n        temperature: Math.round(this.state.temperature * 9 / 5 + 32),\n        tempMin: Math.round(this.state.tempMin * 9 / 5 + 32),\n        tempMax: Math.round(this.state.tempMax * 9 / 5 + 32)\n      });\n    };\n\n    this.displayC = () => {\n      this.setState({\n        celsius: true,\n        fahrenheit: false,\n        temperature: Math.round((this.state.temperature - 32) * (5 / 9)),\n        tempMin: Math.round((this.state.tempMin - 32) * (5 / 9)),\n        tempMax: Math.round((this.state.tempMax - 32) * (5 / 9))\n      });\n    };\n\n    this.handleReturn = () => {\n      this.setState({\n        forecastClass: \"forecast-container-hidden\"\n      });\n    };\n\n    this.handleClick = () => {\n      this.setState({\n        forecastClass: \"forecast-container\"\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) navigator.geolocation.getCurrentPosition(this.getPosition);\n    console.log(\"lat\", this.state.lat);\n\n    if (this.state.lat && this.state.lon) {\n      this.getWeather(this.state.lat, this.state.lon);\n    } else {\n      this.getWeather(false, false);\n    }\n  }\n\n  render() {\n    const {\n      sunrise,\n      sunset,\n      description,\n      wind,\n      humidity,\n      temperature,\n      tempMin,\n      tempMax,\n      country,\n      city,\n      icon,\n      celsius,\n      fahrenheit,\n      error,\n      forecastClass\n    } = this.state;\n    const sunsriseClock = new Date(sunrise * 1000).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n    const sunsetClock = new Date(sunset * 1000).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n    const weatherCode = icon.slice(0, 2).toString();\n    let cityId = \"\";\n\n    if (this.props.cityId) {\n      cityId = this.props.cityId;\n    } else {\n      cityId = this.state.cityId;\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"weather-container\",\n      key: cityId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }, city, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }, \" \", country)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"weather-overview\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    }, temperature, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.displayC,\n      disabled: celsius,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }\n    }, \"\\xB0C\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.displayF,\n      disabled: fahrenheit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    }, \"\\xB0F\")), /*#__PURE__*/React.createElement(\"img\", {\n      src: process.env.PUBLIC_URL + \"/img/\" + weatherCode + \".png\",\n      placeholder: \"img\",\n      alt: \"img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"weather-description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }\n    }, description), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"daily-temp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 15\n      }\n    }, tempMin, celsius && \"째C\", celsius || \"째F\"), \"Min\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"daily-temp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 15\n      }\n    }, tempMax, celsius && \"째C\", celsius || \"째F\"), \"Max\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 15\n      }\n    }, humidity, \"%\"), \"Humidity\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 15\n      }\n    }, wind, \" mph\"), \"Wind\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 15\n      }\n    }, sunsriseClock), \"Sunrise\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 15\n      }\n    }, sunsetClock.slice(0)), \"Sunset\")), error && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }\n    }, \"error :\", error), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"weather-extra\",\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }\n    }, \"5-day forecast\"))), /*#__PURE__*/React.createElement(Forecast, {\n      forecastClass: forecastClass,\n      cityId: cityId,\n      onClick: this.handleReturn,\n      celsius: celsius,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Weather;","map":{"version":3,"sources":["/home/enzo/dev/projects/chasacademy/current/style/src/components/Weather.jsx"],"names":["React","Component","config","Forecast","getCountry","Weather","state","temperature","tempMax","tempMin","city","cityId","country","humidity","wind","description","sunrise","sunset","icon","celsius","fahrenheit","error","forecastClass","lat","undefined","lon","getPosition","position","setState","coords","latitude","longitude","console","log","getWeather","fetchUrl","API_KEY","props","api","fetch","data","json","name","sys","Math","round","main","temp","temp_max","temp_min","speed","weather","e","displayF","displayC","handleReturn","handleClick","componentDidMount","navigator","geolocation","getCurrentPosition","render","sunsriseClock","Date","toLocaleTimeString","hour","minute","sunsetClock","weatherCode","slice","toString","process","env","PUBLIC_URL"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport Forecast from \"./Forecast\";\nimport { getCountry } from \"../services/citiesService\";\n\nclass Weather extends Component {\n  state = {\n    temperature: \"\",\n    tempMax: \"\",\n    tempMin: \"\",\n    city: \"\",\n    cityId: 2673730,\n    country: \"\",\n    humidity: \"\",\n    wind: \"\",\n    description: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    icon: \"\",\n    celsius: true,\n    fahrenheit: false,\n    error: \"\",\n    forecastClass: \"forecast-container-hidden\",\n    lat: undefined,\n    lon: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(this.getPosition);\n    console.log(\"lat\", this.state.lat);\n    if (this.state.lat && this.state.lon) {\n      this.getWeather(this.state.lat, this.state.lon);\n    } else {\n      this.getWeather(false, false);\n    }\n  }\n\n  getPosition = (position) => {\n    this.setState({\n      lat: position.coords.latitude,\n      lon: position.coords.longitude,\n    });\n    console.log(\"lat\", this.state.lat);\n  };\n\n  getWeather = async (lat, lon) => {\n    try {\n      let fetchUrl = \"\";\n      if (lat && lon) {\n        fetchUrl = `//api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${config.API_KEY}`;\n        console.log(\"fetchUrl.using.latlon:\", fetchUrl);\n      } else if (!this.props.cityId) {\n        fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.state.cityId}&appid=${config.API_KEY}`;\n        console.log(\"fetchUrl.using.stockholm:\", fetchUrl);\n      } else {\n        fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.props.cityId}&appid=${config.API_KEY}`;\n        this.setState({ cityId: this.props.cityId });\n        console.log(\"fetchUrl.from.props:\", fetchUrl);\n      }\n      const api = await fetch(fetchUrl);\n      const data = await api.json();\n      // const data = require(`../assets/stockholm.json`);\n      if (data) {\n        this.setState({\n          lat: lat,\n          lon: lon,\n          city: data.name,\n          country: getCountry(data.sys.country),\n          temperature: Math.round(data.main.temp - 273.15),\n          tempMax: Math.round(data.main.temp_max - 273.15),\n          tempMin: Math.round(data.main.temp_min - 273.15),\n          humidity: data.main.humidity,\n          wind: data.wind.speed,\n          description: data.weather[0].description,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          icon: data.weather[0].icon,\n          error: \"\",\n        });\n      }\n    } catch (e) {\n      console.log(\"Error in getWeather function of Weather component.\", e);\n    }\n  };\n\n  displayF = () => {\n    this.setState({\n      celsius: false,\n      fahrenheit: true,\n      temperature: Math.round((this.state.temperature * 9) / 5 + 32),\n      tempMin: Math.round((this.state.tempMin * 9) / 5 + 32),\n      tempMax: Math.round((this.state.tempMax * 9) / 5 + 32),\n    });\n  };\n\n  displayC = () => {\n    this.setState({\n      celsius: true,\n      fahrenheit: false,\n      temperature: Math.round((this.state.temperature - 32) * (5 / 9)),\n      tempMin: Math.round((this.state.tempMin - 32) * (5 / 9)),\n      tempMax: Math.round((this.state.tempMax - 32) * (5 / 9)),\n    });\n  };\n\n  handleReturn = () => {\n    this.setState({ forecastClass: \"forecast-container-hidden\" });\n  };\n\n  handleClick = () => {\n    this.setState({ forecastClass: \"forecast-container\" });\n  };\n\n  render() {\n    const {\n      sunrise,\n      sunset,\n      description,\n      wind,\n      humidity,\n      temperature,\n      tempMin,\n      tempMax,\n      country,\n      city,\n      icon,\n      celsius,\n      fahrenheit,\n      error,\n      forecastClass,\n    } = this.state;\n    const sunsriseClock = new Date(sunrise * 1000).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n    const sunsetClock = new Date(sunset * 1000).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n    const weatherCode = icon.slice(0, 2).toString();\n    let cityId = \"\";\n    if (this.props.cityId) {\n      cityId = this.props.cityId;\n    } else {\n      cityId = this.state.cityId;\n    }\n\n    return (\n      <React.Fragment>\n        <div className=\"weather-container\" key={cityId}>\n          <h2>\n            {city}\n            <span> {country}</span>\n          </h2>\n          <div className=\"weather-overview\">\n            <span>\n              {temperature}\n              <button onClick={this.displayC} disabled={celsius}>\n                째C\n              </button>\n              <button onClick={this.displayF} disabled={fahrenheit}>\n                째F\n              </button>\n            </span>\n            <img\n              src={process.env.PUBLIC_URL + \"/img/\" + weatherCode + \".png\"}\n              placeholder=\"img\"\n              alt=\"img\"\n            />\n          </div>\n          <div id=\"weather-description\">{description}</div>\n          <ul>\n            <li>\n              <span className=\"daily-temp\">\n                {tempMin}\n                {celsius && \"째C\"}\n                {celsius || \"째F\"}\n              </span>\n              Min\n            </li>\n            <li>\n              <span className=\"daily-temp\">\n                {tempMax}\n                {celsius && \"째C\"}\n                {celsius || \"째F\"}\n              </span>\n              Max\n            </li>\n            <li>\n              <span>{humidity}%</span>Humidity\n            </li>\n            <li>\n              <span>{wind} mph</span>Wind\n            </li>\n            <li>\n              <span>{sunsriseClock}</span>Sunrise\n            </li>\n            <li>\n              <span>{sunsetClock.slice(0)}</span>Sunset\n            </li>\n          </ul>\n          {error && <p>error :{error}</p>}\n          <div className=\"weather-extra\" onClick={this.handleClick}>\n            <div>5-day forecast</div>\n          </div>\n        </div>\n        <Forecast\n          forecastClass={forecastClass}\n          cityId={cityId}\n          onClick={this.handleReturn}\n          celsius={celsius}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}