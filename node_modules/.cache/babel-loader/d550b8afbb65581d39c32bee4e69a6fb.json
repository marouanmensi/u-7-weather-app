{"ast":null,"code":"var _jsxFileName = \"/home/dev/chasacademy/weather-app/src/components/Forecast.jsx\";\nimport React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport WeatherDayCard from \"./WeatherDayCard\";\n\nclass Forecast extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      city: null,\n      country: null,\n      latitude: null,\n      longitude: null,\n      temperature: null,\n      feels_like: null,\n      pressure: null,\n      humidity: null,\n      weatherDescription: null,\n      weatherIcon: null,\n      date: null,\n      dailyData: []\n    };\n\n    this.componentDidMount = () => {\n      this.getForecast();\n    };\n\n    this.getForecast = () => {\n      if (this.props.cityId) {\n        try {\n          const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.cityId}&appid=${config.API_KEY}`;\n          console.log(\"weatherURL:\", weatherURL);\n          fetch(weatherURL).then(res => res.json()).then(data => {\n            const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"));\n            this.setState({\n              dailyData: dailyData,\n              city: data.city.name,\n              country: data.city.country,\n              temperature: data.list[0].main.temp,\n              feels_like: data.list[0].main.feels_like,\n              pressure: data.list[0].main.pressure,\n              humidity: data.list[0].main.humidity,\n              weatherDescription: data.list[0].weather[0].description,\n              weatherIcon: data.list[0].weather[0].icon,\n              date: data.list[0].dt_txt\n            }, () => console.log(this.state));\n          });\n        } catch (e) {\n          console.log(\"Error in API request of Forecast component.\", e);\n        }\n      }\n    };\n\n    this.weatherDaysCardsRender = () => {\n      return this.state.dailyData.map((reading, index) => /*#__PURE__*/React.createElement(WeatherDayCard, {\n        reading: reading,\n        key: index,\n        city: this.state.city,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 7\n        }\n      }));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        border: \"1px solid darkgreen\",\n        color: \"darkgreen\",\n        margin: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, \"Forecast Component\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, this.weatherDaysCardsRender()));\n  }\n\n}\n\nexport default Forecast;","map":{"version":3,"sources":["/home/dev/chasacademy/weather-app/src/components/Forecast.jsx"],"names":["React","Component","config","WeatherDayCard","Forecast","state","city","country","latitude","longitude","temperature","feels_like","pressure","humidity","weatherDescription","weatherIcon","date","dailyData","componentDidMount","getForecast","props","cityId","weatherURL","API_KEY","console","log","fetch","then","res","json","data","list","filter","reading","dt_txt","includes","setState","name","main","temp","weather","description","icon","e","weatherDaysCardsRender","map","index","render","border","color","margin"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport WeatherDayCard from \"./WeatherDayCard\";\n\nclass Forecast extends Component {\n  state = {\n    city: null,\n    country: null,\n    latitude: null,\n    longitude: null,\n    temperature: null,\n    feels_like: null,\n    pressure: null,\n    humidity: null,\n    weatherDescription: null,\n    weatherIcon: null,\n    date: null,\n    dailyData: [],\n  };\n\n  componentDidMount = () => {\n    this.getForecast();\n  };\n\n  getForecast = () => {\n    if (this.props.cityId) {\n      try {\n        const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.cityId}&appid=${config.API_KEY}`;\n        console.log(\"weatherURL:\", weatherURL);\n\n        fetch(weatherURL)\n          .then((res) => res.json())\n          .then((data) => {\n            const dailyData = data.list.filter((reading) =>\n              reading.dt_txt.includes(\"18:00:00\")\n            );\n            this.setState(\n              {\n                dailyData: dailyData,\n                city: data.city.name,\n                country: data.city.country,\n                temperature: data.list[0].main.temp,\n                feels_like: data.list[0].main.feels_like,\n                pressure: data.list[0].main.pressure,\n                humidity: data.list[0].main.humidity,\n                weatherDescription: data.list[0].weather[0].description,\n                weatherIcon: data.list[0].weather[0].icon,\n                date: data.list[0].dt_txt,\n              },\n              () => console.log(this.state)\n            );\n          });\n      } catch (e) {\n        console.log(\"Error in API request of Forecast component.\", e);\n      }\n    }\n  };\n\n  weatherDaysCardsRender = () => {\n    return this.state.dailyData.map((reading, index) => (\n      <WeatherDayCard reading={reading} key={index} city={this.state.city} />\n    ));\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          border: \"1px solid darkgreen\",\n          color: \"darkgreen\",\n          margin: \"20px\",\n        }}\n      >\n        <h1>Forecast Component</h1>\n        <div>{this.weatherDaysCardsRender()}</div>\n      </div>\n    );\n  }\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}