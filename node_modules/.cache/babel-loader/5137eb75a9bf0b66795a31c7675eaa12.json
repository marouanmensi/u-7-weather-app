{"ast":null,"code":"var _jsxFileName = \"/home/enzo/dev/projects/chasacademy/current/style/src/components/Forecast.jsx\";\nimport React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport WeatherDayCard from \"./WeatherDayCard\";\nimport { Link } from \"react-router-dom\";\n\nclass Forecast extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fullData: [],\n      dailyData: [],\n      minTemps: [],\n      maxTemps: [],\n      descriptions: [],\n      icons: []\n    };\n\n    this.componentDidMount = () => {\n      console.log(\"Valid request:\", this.props.validRequest());\n      this.getForecast();\n    };\n\n    this.dailyValues = dailyData => {\n      let index = dailyData.findIndex(function (item, i) {\n        return item.dt_txt.endsWith(\"00:00:00\");\n      });\n      let nextDaysArray = [dailyData.slice(index, index + 8), dailyData.slice(index + 8, index + 16), dailyData.slice(index + 16, index + 24), dailyData.slice(index + 24, index + 32), dailyData.slice(index + 32)];\n      let dailyTemps = [];\n      let dailyIcons = [];\n      nextDaysArray.forEach((element, index) => {\n        let dailyTemp = [];\n        let dailyIcon = [];\n        element.forEach((element, index) => {\n          dailyTemp[index] = element[\"main\"][\"temp\"];\n          dailyIcon[index] = element[\"weather\"][0][\"icon\"].slice(0, 2);\n        });\n        dailyTemps[index] = dailyTemp;\n        dailyIcons[index] = dailyIcon;\n      });\n      let maxTemps = [];\n      let minTemps = [];\n      dailyTemps.forEach((element, index) => {\n        maxTemps[index] = Math.round(Math.max(...element) - 273.15);\n        minTemps[index] = Math.round(Math.min(...element) - 273.15);\n      });\n      let icons = [];\n      dailyIcons.forEach((element, index) => {\n        icons[index] = mode(element);\n      });\n      let descIndex = [];\n      nextDaysArray.forEach((day, i) => {\n        let j = day.findIndex(function (item) {\n          return item[\"weather\"][0][\"icon\"].includes(icons[i].toString());\n        });\n        descIndex.push(j);\n      });\n      let descriptions = [];\n      nextDaysArray.forEach((day, index) => {\n        descriptions[index] = day[descIndex[index]][\"weather\"][0][\"description\"];\n      });\n\n      function mode(arr) {\n        let numMapping = {};\n        let greatestFreq = 0;\n        let mode;\n        arr.forEach(function findMode(number) {\n          numMapping[number] = (numMapping[number] || 0) + 1;\n\n          if (greatestFreq < numMapping[number]) {\n            greatestFreq = numMapping[number];\n            mode = number;\n          }\n        });\n        return +mode;\n      }\n\n      return {\n        maxTemps,\n        minTemps,\n        descriptions,\n        icons\n      };\n    };\n\n    this.getForecast = () => {\n      if (this.props.cityId) {\n        try {\n          const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.cityId}&appid=${config.API_KEY}`;\n          fetch(weatherURL).then(res => res.json()).then(data => {\n            // const data = require(`../assets/forecast.json`);\n            const {\n              maxTemps,\n              minTemps,\n              descriptions,\n              icons\n            } = this.dailyValues(data.list); // const dailyData = data[\"list\"];\n\n            const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"00:00:00\"));\n            const fullData = data[\"list\"];\n            this.setState({\n              fullData,\n              dailyData,\n              minTemps,\n              maxTemps,\n              descriptions,\n              icons\n            });\n          });\n        } catch (e) {\n          console.log(\"Error in API request of Forecast component.\", e);\n        }\n      }\n    };\n\n    this.weatherDaysCardsRender = (celsius, minTemps, maxTemps, descriptions, icons) => {\n      return this.state.dailyData.map((reading, index) => /*#__PURE__*/React.createElement(WeatherDayCard, {\n        reading: reading,\n        key: index,\n        city: this.state.city,\n        celsius: celsius,\n        minTemp: minTemps[index],\n        maxTemp: maxTemps[index],\n        description: descriptions[index],\n        icon: icons[index],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 7\n        }\n      }));\n    };\n  }\n\n  render() {\n    const {\n      minTemps,\n      maxTemps,\n      descriptions,\n      icons\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: this.props.forecastClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"go-back-arrow\",\n      onClick: this.props.onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: process.env.PUBLIC_URL + \"/img/back-arrow.png\",\n      placeholder: \"img\",\n      alt: \"img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      key: this.state.temperature,\n      className: \"cards-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }, this.weatherDaysCardsRender(this.props.celsius, minTemps, maxTemps, descriptions, icons)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"intervals-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: `/details/${this.props.celsius}/${this.props.cityId}`,\n      onClick: this.props.onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }\n    }, \"3-hour intervals\")));\n  }\n\n}\n\nexport default Forecast;","map":{"version":3,"sources":["/home/enzo/dev/projects/chasacademy/current/style/src/components/Forecast.jsx"],"names":["React","Component","config","WeatherDayCard","Link","Forecast","state","fullData","dailyData","minTemps","maxTemps","descriptions","icons","componentDidMount","console","log","props","validRequest","getForecast","dailyValues","index","findIndex","item","i","dt_txt","endsWith","nextDaysArray","slice","dailyTemps","dailyIcons","forEach","element","dailyTemp","dailyIcon","Math","round","max","min","mode","descIndex","day","j","includes","toString","push","arr","numMapping","greatestFreq","findMode","number","cityId","weatherURL","API_KEY","fetch","then","res","json","data","list","filter","reading","setState","e","weatherDaysCardsRender","celsius","map","city","render","forecastClass","onClick","process","env","PUBLIC_URL","temperature","onClose"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport WeatherDayCard from \"./WeatherDayCard\";\nimport { Link } from \"react-router-dom\";\n\nclass Forecast extends Component {\n  state = {\n    fullData: [],\n    dailyData: [],\n    minTemps: [],\n    maxTemps: [],\n    descriptions: [],\n    icons: [],\n  };\n\n  componentDidMount = () => {\n    console.log(\"Valid request:\", this.props.validRequest());\n    this.getForecast();\n  };\n\n  dailyValues = (dailyData) => {\n    let index = dailyData.findIndex(function (item, i) {\n      return item.dt_txt.endsWith(\"00:00:00\");\n    });\n    let nextDaysArray = [\n      dailyData.slice(index, index + 8),\n      dailyData.slice(index + 8, index + 16),\n      dailyData.slice(index + 16, index + 24),\n      dailyData.slice(index + 24, index + 32),\n      dailyData.slice(index + 32),\n    ];\n    let dailyTemps = [];\n    let dailyIcons = [];\n    nextDaysArray.forEach((element, index) => {\n      let dailyTemp = [];\n      let dailyIcon = [];\n      element.forEach((element, index) => {\n        dailyTemp[index] = element[\"main\"][\"temp\"];\n        dailyIcon[index] = element[\"weather\"][0][\"icon\"].slice(0, 2);\n      });\n      dailyTemps[index] = dailyTemp;\n      dailyIcons[index] = dailyIcon;\n    });\n\n    let maxTemps = [];\n    let minTemps = [];\n    dailyTemps.forEach((element, index) => {\n      maxTemps[index] = Math.round(Math.max(...element) - 273.15);\n      minTemps[index] = Math.round(Math.min(...element) - 273.15);\n    });\n    let icons = [];\n    dailyIcons.forEach((element, index) => {\n      icons[index] = mode(element);\n    });\n    let descIndex = [];\n    nextDaysArray.forEach((day, i) => {\n      let j = day.findIndex(function (item) {\n        return item[\"weather\"][0][\"icon\"].includes(icons[i].toString());\n      });\n      descIndex.push(j);\n    });\n    let descriptions = [];\n    nextDaysArray.forEach((day, index) => {\n      descriptions[index] = day[descIndex[index]][\"weather\"][0][\"description\"];\n    });\n\n    function mode(arr) {\n      let numMapping = {};\n      let greatestFreq = 0;\n      let mode;\n      arr.forEach(function findMode(number) {\n        numMapping[number] = (numMapping[number] || 0) + 1;\n\n        if (greatestFreq < numMapping[number]) {\n          greatestFreq = numMapping[number];\n          mode = number;\n        }\n      });\n      return +mode;\n    }\n    return { maxTemps, minTemps, descriptions, icons };\n  };\n\n  getForecast = () => {\n    if (this.props.cityId) {\n      try {\n        const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.cityId}&appid=${config.API_KEY}`;\n\n        fetch(weatherURL)\n          .then((res) => res.json())\n          .then((data) => {\n            // const data = require(`../assets/forecast.json`);\n\n            const {\n              maxTemps,\n              minTemps,\n              descriptions,\n              icons,\n            } = this.dailyValues(data.list);\n\n            // const dailyData = data[\"list\"];\n\n            const dailyData = data.list.filter((reading) =>\n              reading.dt_txt.includes(\"00:00:00\")\n            );\n\n            const fullData = data[\"list\"];\n\n            this.setState({\n              fullData,\n              dailyData,\n              minTemps,\n              maxTemps,\n              descriptions,\n              icons,\n            });\n          });\n      } catch (e) {\n        console.log(\"Error in API request of Forecast component.\", e);\n      }\n    }\n  };\n\n  weatherDaysCardsRender = (\n    celsius,\n    minTemps,\n    maxTemps,\n    descriptions,\n    icons\n  ) => {\n    return this.state.dailyData.map((reading, index) => (\n      <WeatherDayCard\n        reading={reading}\n        key={index}\n        city={this.state.city}\n        celsius={celsius}\n        minTemp={minTemps[index]}\n        maxTemp={maxTemps[index]}\n        description={descriptions[index]}\n        icon={icons[index]}\n      />\n    ));\n  };\n\n  render() {\n    const { minTemps, maxTemps, descriptions, icons } = this.state;\n    return (\n      <div className={this.props.forecastClass}>\n        <div id=\"go-back-arrow\" onClick={this.props.onClick}>\n          <img\n            src={process.env.PUBLIC_URL + \"/img/back-arrow.png\"}\n            placeholder=\"img\"\n            alt=\"img\"\n          />\n        </div>\n        <div key={this.state.temperature} className=\"cards-container\">\n          {this.weatherDaysCardsRender(\n            this.props.celsius,\n            minTemps,\n            maxTemps,\n            descriptions,\n            icons\n          )}\n        </div>\n        <div className=\"intervals-button\">\n          <Link\n            to={`/details/${this.props.celsius}/${this.props.cityId}`}\n            onClick={this.props.onClose}\n          >\n            3-hour intervals\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}