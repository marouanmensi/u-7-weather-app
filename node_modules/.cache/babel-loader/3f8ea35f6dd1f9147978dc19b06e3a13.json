{"ast":null,"code":"var _jsxFileName = \"/home/dev/chasacademy/current/style/src/components/Weather.jsx\";\nimport React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport Forecast from \"./Forecast\";\nimport { getCountry } from \"../services/citiesService\";\n\nclass Weather extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temperature: \"\",\n      city: \"\",\n      cityId: 2673730,\n      country: \"\",\n      humidity: \"\",\n      wind: \"\",\n      description: \"\",\n      sunrise: \"\",\n      sunset: \"\",\n      icon: \"\",\n      celsius: true,\n      fahrenheit: false,\n      error: \"\"\n    };\n\n    this.getWeather = async () => {\n      // try {\n      //   let fetchUrl = \"\";\n      //   if (!this.props.cityId) {\n      //     fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.state.cityId}&appid=${config.API_KEY}`;\n      //     console.log(\"fetchUrl.using.stockholm:\", fetchUrl);\n      //   } else {\n      //     fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.props.cityId}&appid=${config.API_KEY}`;\n      //     this.setState({ cityId: this.props.cityId });\n      //     console.log(\"fetchUrl.from.props:\", fetchUrl);\n      //   }\n      //   const api = await fetch(fetchUrl);\n      //   const data = await api.json();\n      const data = require(`../assets/stockholm.json`);\n\n      if (data) {\n        this.setState({\n          city: data.name,\n          country: getCountry(data.sys.country),\n          temperature: Math.round(data.main.temp - 273.15),\n          tempMax: Math.round(data.main.temp_max - 273.15),\n          tempMin: Math.round(data.main.temp_min - 273.15),\n          humidity: data.main.humidity,\n          wind: data.wind.speed,\n          description: data.weather[0].description,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          icon: data.weather[0].icon,\n          error: \"\"\n        });\n      } // } catch (e) {\n      //   console.log(\"Error in getWeather function of Weather component.\", e);\n      // }\n\n    };\n\n    this.displayF = () => {\n      this.setState({\n        celsius: false,\n        fahrenheit: true,\n        temperature: this.state.temperature * 9 / 5 + 32\n      });\n    };\n\n    this.displayC = () => {\n      this.setState({\n        celsius: true,\n        fahrenheit: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getWeather();\n  }\n\n  render() {\n    const {\n      sunrise,\n      sunset,\n      description,\n      wind,\n      humidity,\n      temperature,\n      tempMin,\n      tempMax,\n      country,\n      city,\n      icon,\n      celsius,\n      fahrenheit,\n      error\n    } = this.state;\n    const sunsriseClock = new Date(sunrise * 1000).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n    const sunsetClock = new Date(sunset * 1000).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n    const weatherCode = icon.slice(0, 2).toString();\n    let cityId = \"\";\n\n    if (this.props.cityId) {\n      cityId = this.props.cityId;\n    } else {\n      cityId = this.state.cityId;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: cityId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, city, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, \" \", country)), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"weather-overview\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, temperature, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.displayC,\n      disabled: celsius,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, \"\\xB0C\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.displayF,\n      disabled: fahrenheit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }, \"\\xB0F\")), /*#__PURE__*/React.createElement(\"img\", {\n      src: process.env.PUBLIC_URL + \"/img/\" + weatherCode + \".png\",\n      placeholder: \"img\",\n      alt: \"img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"weather-description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, description), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }, tempMin, \"\\xB0C\"), \"Min\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, tempMax, \"\\xB0C\"), \"Max\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }\n    }, humidity, \"%\"), \"Humidity\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }, wind, \" mph\"), \"Wind\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, sunsriseClock), \"Sunrise\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }, sunsetClock.slice(0)), \"Sunset\")), error && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 19\n      }\n    }, \"error :\", error), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"weather-extra\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }, \"5-day forecast\")));\n  }\n\n}\n\nexport default Weather;","map":{"version":3,"sources":["/home/dev/chasacademy/current/style/src/components/Weather.jsx"],"names":["React","Component","config","Forecast","getCountry","Weather","state","temperature","city","cityId","country","humidity","wind","description","sunrise","sunset","icon","celsius","fahrenheit","error","getWeather","data","require","setState","name","sys","Math","round","main","temp","tempMax","temp_max","tempMin","temp_min","speed","weather","displayF","displayC","componentDidMount","render","sunsriseClock","Date","toLocaleTimeString","hour","minute","sunsetClock","weatherCode","slice","toString","props","process","env","PUBLIC_URL"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport Forecast from \"./Forecast\";\nimport { getCountry } from \"../services/citiesService\";\n\nclass Weather extends Component {\n  state = {\n    temperature: \"\",\n    city: \"\",\n    cityId: 2673730,\n    country: \"\",\n    humidity: \"\",\n    wind: \"\",\n    description: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    icon: \"\",\n    celsius: true,\n    fahrenheit: false,\n    error: \"\",\n  };\n\n  componentDidMount() {\n    this.getWeather();\n  }\n\n  getWeather = async () => {\n    // try {\n    //   let fetchUrl = \"\";\n    //   if (!this.props.cityId) {\n    //     fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.state.cityId}&appid=${config.API_KEY}`;\n    //     console.log(\"fetchUrl.using.stockholm:\", fetchUrl);\n    //   } else {\n    //     fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.props.cityId}&appid=${config.API_KEY}`;\n    //     this.setState({ cityId: this.props.cityId });\n    //     console.log(\"fetchUrl.from.props:\", fetchUrl);\n    //   }\n    //   const api = await fetch(fetchUrl);\n    //   const data = await api.json();\n    const data = require(`../assets/stockholm.json`);\n    if (data) {\n      this.setState({\n        city: data.name,\n        country: getCountry(data.sys.country),\n        temperature: Math.round(data.main.temp - 273.15),\n        tempMax: Math.round(data.main.temp_max - 273.15),\n        tempMin: Math.round(data.main.temp_min - 273.15),\n        humidity: data.main.humidity,\n        wind: data.wind.speed,\n        description: data.weather[0].description,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset,\n        icon: data.weather[0].icon,\n        error: \"\",\n      });\n    }\n    // } catch (e) {\n    //   console.log(\"Error in getWeather function of Weather component.\", e);\n    // }\n  };\n\n  displayF = () => {\n    this.setState({\n      celsius: false,\n      fahrenheit: true,\n      temperature: (this.state.temperature * 9) / 5 + 32,\n    });\n  };\n\n  displayC = () => {\n    this.setState({ celsius: true, fahrenheit: false });\n  };\n\n  render() {\n    const {\n      sunrise,\n      sunset,\n      description,\n      wind,\n      humidity,\n      temperature,\n      tempMin,\n      tempMax,\n      country,\n      city,\n      icon,\n      celsius,\n      fahrenheit,\n      error,\n    } = this.state;\n    const sunsriseClock = new Date(sunrise * 1000).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n    const sunsetClock = new Date(sunset * 1000).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n    const weatherCode = icon.slice(0, 2).toString();\n    let cityId = \"\";\n    if (this.props.cityId) {\n      cityId = this.props.cityId;\n    } else {\n      cityId = this.state.cityId;\n    }\n\n    return (\n      <div key={cityId}>\n        <h2>\n          {city}\n          <span> {country}</span>\n        </h2>\n        <div class=\"weather-overview\">\n          <span>\n            {temperature}\n            <button onClick={this.displayC} disabled={celsius}>\n              °C\n            </button>\n            <button onClick={this.displayF} disabled={fahrenheit}>\n              °F\n            </button>\n          </span>\n          <img\n            src={process.env.PUBLIC_URL + \"/img/\" + weatherCode + \".png\"}\n            placeholder=\"img\"\n            alt=\"img\"\n          />\n        </div>\n        <div id=\"weather-description\">{description}</div>\n        <ul>\n          <li>\n            <span>{tempMin}°C</span>Min\n          </li>\n          <li>\n            <span>{tempMax}°C</span>Max\n          </li>\n          <li>\n            <span>{humidity}%</span>Humidity\n          </li>\n          <li>\n            <span>{wind} mph</span>Wind\n          </li>\n          <li>\n            <span>{sunsriseClock}</span>Sunrise\n          </li>\n          <li>\n            <span>{sunsetClock.slice(0)}</span>Sunset\n          </li>\n        </ul>\n        {error && <p>error :{error}</p>}\n        <div className=\"weather-extra\">\n          <div>5-day forecast</div>\n        </div>\n        {/* <Forecast cityId={cityId} /> */}\n      </div>\n    );\n  }\n}\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}