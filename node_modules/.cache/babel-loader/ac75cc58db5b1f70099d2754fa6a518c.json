{"ast":null,"code":"var _jsxFileName = \"/home/dev/chasacademy/current/style/src/components/Forecast.jsx\";\nimport React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport WeatherDayCard from \"./WeatherDayCard\";\n\nclass Forecast extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      city: null,\n      country: null,\n      latitude: null,\n      longitude: null,\n      temperature: null,\n      feels_like: null,\n      pressure: null,\n      humidity: null,\n      weatherDescription: null,\n      weatherIcon: null,\n      date: null,\n      dailyData: []\n    };\n\n    this.componentDidMount = () => {\n      this.getForecast();\n    };\n\n    this.getForecast = () => {\n      // if (this.props.cityId) {\n      //   try {\n      //     const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.cityId}&appid=${config.API_KEY}`;\n      //     fetch(weatherURL)\n      // .then((res) => res.json())\n      // .then((data) => {\n      const data = require(`../assets/forecast.json`);\n\n      const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"));\n      this.setState({\n        dailyData: dailyData,\n        city: data.city.name,\n        country: data.city.country,\n        temperature: data.list[0].main.temp,\n        feels_like: data.list[0].main.feels_like,\n        pressure: data.list[0].main.pressure,\n        humidity: data.list[0].main.humidity,\n        weatherDescription: data.list[0].weather[0].description,\n        weatherIcon: data.list[0].weather[0].icon,\n        date: data.list[0].dt_txt\n      }, () => console.log(this.state)); // });\n      // } catch (e) {\n      //   console.log(\"Error in API request of Forecast component.\", e);\n      // }\n      // }\n    };\n\n    this.weatherDaysCardsRender = () => {\n      return this.state.dailyData.map((reading, index) => /*#__PURE__*/React.createElement(WeatherDayCard, {\n        reading: reading,\n        key: index,\n        city: this.state.city,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 7\n        }\n      }));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"forecast-container-hidden\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"go-back-arrow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: process.env.PUBLIC_URL + \"/img/back-arrow.png\",\n      placeholder: \"img\",\n      alt: \"img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cards-container\",\n      onClick: this.props.onReturn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, this.weatherDaysCardsRender()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"intervals-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, \"3-hour itervals\")));\n  }\n\n}\n\nexport default Forecast;","map":{"version":3,"sources":["/home/dev/chasacademy/current/style/src/components/Forecast.jsx"],"names":["React","Component","config","WeatherDayCard","Forecast","state","city","country","latitude","longitude","temperature","feels_like","pressure","humidity","weatherDescription","weatherIcon","date","dailyData","componentDidMount","getForecast","data","require","list","filter","reading","dt_txt","includes","setState","name","main","temp","weather","description","icon","console","log","weatherDaysCardsRender","map","index","render","process","env","PUBLIC_URL","props","onReturn"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport WeatherDayCard from \"./WeatherDayCard\";\n\nclass Forecast extends Component {\n  state = {\n    city: null,\n    country: null,\n    latitude: null,\n    longitude: null,\n    temperature: null,\n    feels_like: null,\n    pressure: null,\n    humidity: null,\n    weatherDescription: null,\n    weatherIcon: null,\n    date: null,\n    dailyData: [],\n  };\n\n  componentDidMount = () => {\n    this.getForecast();\n  };\n\n  getForecast = () => {\n    // if (this.props.cityId) {\n    //   try {\n    //     const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.cityId}&appid=${config.API_KEY}`;\n\n    //     fetch(weatherURL)\n    // .then((res) => res.json())\n    // .then((data) => {\n    const data = require(`../assets/forecast.json`);\n    const dailyData = data.list.filter((reading) =>\n      reading.dt_txt.includes(\"18:00:00\")\n    );\n    this.setState(\n      {\n        dailyData: dailyData,\n        city: data.city.name,\n        country: data.city.country,\n        temperature: data.list[0].main.temp,\n        feels_like: data.list[0].main.feels_like,\n        pressure: data.list[0].main.pressure,\n        humidity: data.list[0].main.humidity,\n        weatherDescription: data.list[0].weather[0].description,\n        weatherIcon: data.list[0].weather[0].icon,\n        date: data.list[0].dt_txt,\n      },\n      () => console.log(this.state)\n    );\n    // });\n    // } catch (e) {\n    //   console.log(\"Error in API request of Forecast component.\", e);\n    // }\n    // }\n  };\n\n  weatherDaysCardsRender = () => {\n    return this.state.dailyData.map((reading, index) => (\n      <WeatherDayCard reading={reading} key={index} city={this.state.city} />\n    ));\n  };\n\n  render() {\n    return (\n      <div className=\"forecast-container-hidden\">\n        <div id=\"go-back-arrow\">\n          <img\n            src={process.env.PUBLIC_URL + \"/img/back-arrow.png\"}\n            placeholder=\"img\"\n            alt=\"img\"\n          />\n        </div>\n        <div className=\"cards-container\" onClick={this.props.onReturn}>\n          {this.weatherDaysCardsRender()}\n        </div>\n        <div className=\"intervals-button\">\n          <div>3-hour itervals</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}