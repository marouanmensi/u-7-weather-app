{"ast":null,"code":"var _jsxFileName = \"/home/enzo/dev/projects/chasacademy/current/style/src/components/Forecast.jsx\";\nimport React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport WeatherDayCard from \"./WeatherDayCard\";\nimport { Link, Redirect } from \"react-router-dom\";\n\nclass Forecast extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fullData: [],\n      dailyData: [],\n      minTemps: [],\n      maxTemps: [],\n      descriptions: [],\n      icons: [],\n      validRequest: true\n    };\n\n    this.componentDidMount = () => {\n      console.log(\"Valid request:\", this.state.validRequest);\n      this.getForecast();\n    };\n\n    this.dailyValues = dailyData => {\n      try {\n        let index = dailyData.findIndex(function (item, i) {\n          return item.dt_txt.endsWith(\"00:00:00\");\n        });\n        let nextDaysArray = [dailyData.slice(index, index + 8), dailyData.slice(index + 8, index + 16), dailyData.slice(index + 16, index + 24), dailyData.slice(index + 24, index + 32), dailyData.slice(index + 32)];\n        let dailyTemps = [];\n        let dailyIcons = [];\n        nextDaysArray.forEach((element, index) => {\n          let dailyTemp = [];\n          let dailyIcon = [];\n          element.forEach((element, index) => {\n            dailyTemp[index] = element[\"main\"][\"temp\"];\n            dailyIcon[index] = element[\"weather\"][0][\"icon\"].slice(0, 2);\n          });\n          dailyTemps[index] = dailyTemp;\n          dailyIcons[index] = dailyIcon;\n        });\n        let maxTemps = [];\n        let minTemps = [];\n        dailyTemps.forEach((element, index) => {\n          maxTemps[index] = Math.round(Math.max(...element) - 273.15);\n          minTemps[index] = Math.round(Math.min(...element) - 273.15);\n        });\n        let icons = [];\n        dailyIcons.forEach((element, index) => {\n          icons[index] = mode(element);\n        });\n        let descIndex = [];\n        nextDaysArray.forEach((day, i) => {\n          let j = day.findIndex(function (item) {\n            return item[\"weather\"][0][\"icon\"].includes(icons[i].toString());\n          });\n          descIndex.push(j);\n        });\n        let descriptions = [];\n        nextDaysArray.forEach((day, index) => {\n          descriptions[index] = day[descIndex[index]][\"weather\"][0][\"description\"];\n        });\n\n        function mode(arr) {\n          let numMapping = {};\n          let greatestFreq = 0;\n          let mode;\n          arr.forEach(function findMode(number) {\n            numMapping[number] = (numMapping[number] || 0) + 1;\n\n            if (greatestFreq < numMapping[number]) {\n              greatestFreq = numMapping[number];\n              mode = number;\n            }\n          });\n          return +mode;\n        }\n\n        return {\n          maxTemps,\n          minTemps,\n          descriptions,\n          icons\n        };\n      } catch (e) {\n        this.setState({\n          validRequest: false\n        });\n        console.log(\"Error in dailyValues function\", e);\n      }\n    };\n\n    this.getForecast = () => {\n      if (this.props.cityId) {\n        try {\n          const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.cityId}&appid=${config.API_KEY}`;\n          fetch(weatherURL).then(res => res.json()).then(data => {\n            // const data = require(`../assets/forecast.json`);\n            if (Object.keys(data) > 3) {\n              const {\n                maxTemps,\n                minTemps,\n                descriptions,\n                icons\n              } = this.dailyValues(data.list); // const dailyData = data[\"list\"];\n\n              const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"00:00:00\"));\n              console.log(\"dailyData getForecast\", dailyData);\n              const fullData = data[\"list\"];\n              this.setState({\n                fullData,\n                dailyData,\n                minTemps,\n                maxTemps,\n                descriptions,\n                icons\n              });\n            }\n          });\n        } catch (e) {\n          this.setState({\n            validRequest: false\n          });\n          console.log(\"Error in API request of Forecast component.\", e);\n        }\n      }\n    };\n\n    this.weatherDaysCardsRender = (celsius, minTemps, maxTemps, descriptions, icons) => {\n      console.log(\"valid request cards\", this.state.validRequest);\n      console.log(\"dailyData cards\", this.state.dailyData);\n      return this.state.dailyData.map((reading, index) => /*#__PURE__*/React.createElement(WeatherDayCard, {\n        reading: reading,\n        key: index,\n        city: this.state.city,\n        celsius: celsius,\n        minTemp: minTemps[index],\n        maxTemp: maxTemps[index],\n        description: descriptions[index],\n        icon: icons[index],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 7\n        }\n      }));\n    };\n  }\n\n  render() {\n    const {\n      minTemps,\n      maxTemps,\n      descriptions,\n      icons\n    } = this.state;\n\n    if (!this.state.validRequest) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/not-found\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 14\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: this.props.forecastClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"go-back-arrow\",\n        onClick: this.props.onClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: process.env.PUBLIC_URL + \"/img/back-arrow.png\",\n        placeholder: \"img\",\n        alt: \"img\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        key: this.state.temperature,\n        className: \"cards-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }\n      }, this.weatherDaysCardsRender(this.props.celsius, minTemps, maxTemps, descriptions, icons)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"intervals-button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: `/details/${this.props.celsius}/${this.props.cityId}`,\n        onClick: this.props.onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }\n      }, \"3-hour intervals\")));\n    }\n  }\n\n}\n\nexport default Forecast;","map":{"version":3,"sources":["/home/enzo/dev/projects/chasacademy/current/style/src/components/Forecast.jsx"],"names":["React","Component","config","WeatherDayCard","Link","Redirect","Forecast","state","fullData","dailyData","minTemps","maxTemps","descriptions","icons","validRequest","componentDidMount","console","log","getForecast","dailyValues","index","findIndex","item","i","dt_txt","endsWith","nextDaysArray","slice","dailyTemps","dailyIcons","forEach","element","dailyTemp","dailyIcon","Math","round","max","min","mode","descIndex","day","j","includes","toString","push","arr","numMapping","greatestFreq","findMode","number","e","setState","props","cityId","weatherURL","API_KEY","fetch","then","res","json","data","Object","keys","list","filter","reading","weatherDaysCardsRender","celsius","map","city","render","forecastClass","onClick","process","env","PUBLIC_URL","temperature","onClose"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport WeatherDayCard from \"./WeatherDayCard\";\nimport { Link, Redirect } from \"react-router-dom\";\n\nclass Forecast extends Component {\n  state = {\n    fullData: [],\n    dailyData: [],\n    minTemps: [],\n    maxTemps: [],\n    descriptions: [],\n    icons: [],\n    validRequest: true,\n  };\n\n  componentDidMount = () => {\n    console.log(\"Valid request:\", this.state.validRequest);\n    this.getForecast();\n  };\n\n  dailyValues = (dailyData) => {\n    try {\n      let index = dailyData.findIndex(function (item, i) {\n        return item.dt_txt.endsWith(\"00:00:00\");\n      });\n      let nextDaysArray = [\n        dailyData.slice(index, index + 8),\n        dailyData.slice(index + 8, index + 16),\n        dailyData.slice(index + 16, index + 24),\n        dailyData.slice(index + 24, index + 32),\n        dailyData.slice(index + 32),\n      ];\n      let dailyTemps = [];\n      let dailyIcons = [];\n      nextDaysArray.forEach((element, index) => {\n        let dailyTemp = [];\n        let dailyIcon = [];\n        element.forEach((element, index) => {\n          dailyTemp[index] = element[\"main\"][\"temp\"];\n          dailyIcon[index] = element[\"weather\"][0][\"icon\"].slice(0, 2);\n        });\n        dailyTemps[index] = dailyTemp;\n        dailyIcons[index] = dailyIcon;\n      });\n\n      let maxTemps = [];\n      let minTemps = [];\n      dailyTemps.forEach((element, index) => {\n        maxTemps[index] = Math.round(Math.max(...element) - 273.15);\n        minTemps[index] = Math.round(Math.min(...element) - 273.15);\n      });\n      let icons = [];\n      dailyIcons.forEach((element, index) => {\n        icons[index] = mode(element);\n      });\n      let descIndex = [];\n      nextDaysArray.forEach((day, i) => {\n        let j = day.findIndex(function (item) {\n          return item[\"weather\"][0][\"icon\"].includes(icons[i].toString());\n        });\n        descIndex.push(j);\n      });\n      let descriptions = [];\n      nextDaysArray.forEach((day, index) => {\n        descriptions[index] =\n          day[descIndex[index]][\"weather\"][0][\"description\"];\n      });\n\n      function mode(arr) {\n        let numMapping = {};\n        let greatestFreq = 0;\n        let mode;\n        arr.forEach(function findMode(number) {\n          numMapping[number] = (numMapping[number] || 0) + 1;\n\n          if (greatestFreq < numMapping[number]) {\n            greatestFreq = numMapping[number];\n            mode = number;\n          }\n        });\n        return +mode;\n      }\n      return { maxTemps, minTemps, descriptions, icons };\n    } catch (e) {\n      this.setState({ validRequest: false });\n      console.log(\"Error in dailyValues function\", e);\n    }\n  };\n\n  getForecast = () => {\n    if (this.props.cityId) {\n      try {\n        const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.cityId}&appid=${config.API_KEY}`;\n\n        fetch(weatherURL)\n          .then((res) => res.json())\n          .then((data) => {\n            // const data = require(`../assets/forecast.json`);\n            if (Object.keys(data) > 3) {\n              const {\n                maxTemps,\n                minTemps,\n                descriptions,\n                icons,\n              } = this.dailyValues(data.list);\n\n              // const dailyData = data[\"list\"];\n\n              const dailyData = data.list.filter((reading) =>\n                reading.dt_txt.includes(\"00:00:00\")\n              );\n\n              console.log(\"dailyData getForecast\", dailyData);\n\n              const fullData = data[\"list\"];\n\n              this.setState({\n                fullData,\n                dailyData,\n                minTemps,\n                maxTemps,\n                descriptions,\n                icons,\n              });\n            }\n          });\n      } catch (e) {\n        this.setState({ validRequest: false });\n        console.log(\"Error in API request of Forecast component.\", e);\n      }\n    }\n  };\n\n  weatherDaysCardsRender = (\n    celsius,\n    minTemps,\n    maxTemps,\n    descriptions,\n    icons\n  ) => {\n    console.log(\"valid request cards\", this.state.validRequest);\n    console.log(\"dailyData cards\", this.state.dailyData);\n    return this.state.dailyData.map((reading, index) => (\n      <WeatherDayCard\n        reading={reading}\n        key={index}\n        city={this.state.city}\n        celsius={celsius}\n        minTemp={minTemps[index]}\n        maxTemp={maxTemps[index]}\n        description={descriptions[index]}\n        icon={icons[index]}\n      />\n    ));\n  };\n\n  render() {\n    const { minTemps, maxTemps, descriptions, icons } = this.state;\n    if (!this.state.validRequest) {\n      return <Redirect to=\"/not-found\" />;\n    } else {\n      return (\n        <div className={this.props.forecastClass}>\n          <div id=\"go-back-arrow\" onClick={this.props.onClick}>\n            <img\n              src={process.env.PUBLIC_URL + \"/img/back-arrow.png\"}\n              placeholder=\"img\"\n              alt=\"img\"\n            />\n          </div>\n          <div key={this.state.temperature} className=\"cards-container\">\n            {this.weatherDaysCardsRender(\n              this.props.celsius,\n              minTemps,\n              maxTemps,\n              descriptions,\n              icons\n            )}\n          </div>\n          <div className=\"intervals-button\">\n            <Link\n              to={`/details/${this.props.celsius}/${this.props.cityId}`}\n              onClick={this.props.onClose}\n            >\n              3-hour intervals\n            </Link>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}