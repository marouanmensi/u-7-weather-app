{"ast":null,"code":"var _jsxFileName = \"/home/enzo/dev/projects/chasacademy/current/style/src/components/Forecast.jsx\";\nimport React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport WeatherDayCard from \"./WeatherDayCard\";\n\nclass Forecast extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      city: null,\n      country: null,\n      latitude: null,\n      longitude: null,\n      temperature: null,\n      feels_like: null,\n      pressure: null,\n      humidity: null,\n      weatherDescription: null,\n      weatherIcon: null,\n      date: null,\n      dailyData: []\n    };\n\n    this.componentDidMount = () => {\n      this.getForecast();\n    };\n\n    this.getMaxTemp = dailyData => {\n      let index = dailyData.findIndex(function (item, i) {\n        return item.dt_txt.endsWith(\"00:00:00\");\n      });\n      let nextDaysArray = [dailyData.slice(index, index + 8), dailyData.slice(index + 8, index + 16), dailyData.slice(index + 16, index + 24), dailyData.slice(index + 24, index + 32), dailyData.slice(index + 32)];\n      let dailyTemps = nextDaysArray[0][\"main\"]; // nextDaysArray.forEach((element, index) => {\n      //   dailyTemps[index] += element[\"main\"][\"temp\"];\n      // });\n\n      console.log(\"dailyTemps:\", dailyTemps);\n    };\n\n    this.getForecast = () => {\n      if (this.props.cityId) {\n        // try {\n        //   const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.cityId}&appid=${config.API_KEY}`;\n        //   fetch(weatherURL)\n        //     .then((res) => res.json())\n        //     .then((data) => {\n        const data = require(`../assets/forecast.json`);\n\n        this.getMaxTemp(data.list);\n        const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"));\n        console.log(\"DailyData\", dailyData);\n        this.setState({\n          dailyData: dailyData,\n          city: data.city.name,\n          country: data.city.country,\n          feels_like: data.list[0].main.feels_like,\n          pressure: data.list[0].main.pressure,\n          humidity: data.list[0].main.humidity,\n          weatherDescription: data.list[0].weather[0].description,\n          weatherIcon: data.list[0].weather[0].icon,\n          date: data.list[0].dt_txt\n        }, () => console.log(this.state)); // });\n        // } catch (e) {\n        //   console.log(\"Error in API request of Forecast component.\", e);\n        // }\n      }\n    };\n\n    this.weatherDaysCardsRender = celsius => {\n      return this.state.dailyData.map((reading, index) => /*#__PURE__*/React.createElement(WeatherDayCard, {\n        reading: reading,\n        key: index,\n        city: this.state.city,\n        celsius: celsius,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 7\n        }\n      }));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: this.props.forecastClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"go-back-arrow\",\n      onClick: this.props.onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: process.env.PUBLIC_URL + \"/img/back-arrow.png\",\n      placeholder: \"img\",\n      alt: \"img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      key: this.state.temperature,\n      className: \"cards-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, this.weatherDaysCardsRender(this.props.celsius)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"intervals-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, \"3-hour intervals\")));\n  }\n\n}\n\nexport default Forecast;","map":{"version":3,"sources":["/home/enzo/dev/projects/chasacademy/current/style/src/components/Forecast.jsx"],"names":["React","Component","config","WeatherDayCard","Forecast","state","city","country","latitude","longitude","temperature","feels_like","pressure","humidity","weatherDescription","weatherIcon","date","dailyData","componentDidMount","getForecast","getMaxTemp","index","findIndex","item","i","dt_txt","endsWith","nextDaysArray","slice","dailyTemps","console","log","props","cityId","data","require","list","filter","reading","includes","setState","name","main","weather","description","icon","weatherDaysCardsRender","celsius","map","render","forecastClass","onClick","process","env","PUBLIC_URL"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport WeatherDayCard from \"./WeatherDayCard\";\n\nclass Forecast extends Component {\n  state = {\n    city: null,\n    country: null,\n    latitude: null,\n    longitude: null,\n    temperature: null,\n    feels_like: null,\n    pressure: null,\n    humidity: null,\n    weatherDescription: null,\n    weatherIcon: null,\n    date: null,\n    dailyData: [],\n  };\n\n  componentDidMount = () => {\n    this.getForecast();\n  };\n\n  getMaxTemp = (dailyData) => {\n    let index = dailyData.findIndex(function (item, i) {\n      return item.dt_txt.endsWith(\"00:00:00\");\n    });\n    let nextDaysArray = [\n      dailyData.slice(index, index + 8),\n      dailyData.slice(index + 8, index + 16),\n      dailyData.slice(index + 16, index + 24),\n      dailyData.slice(index + 24, index + 32),\n      dailyData.slice(index + 32),\n    ];\n    let dailyTemps = nextDaysArray[0][\"main\"];\n    // nextDaysArray.forEach((element, index) => {\n    //   dailyTemps[index] += element[\"main\"][\"temp\"];\n    // });\n\n    console.log(\"dailyTemps:\", dailyTemps);\n  };\n\n  getForecast = () => {\n    if (this.props.cityId) {\n      // try {\n      //   const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.cityId}&appid=${config.API_KEY}`;\n\n      //   fetch(weatherURL)\n      //     .then((res) => res.json())\n      //     .then((data) => {\n      const data = require(`../assets/forecast.json`);\n\n      this.getMaxTemp(data.list);\n\n      const dailyData = data.list.filter((reading) =>\n        reading.dt_txt.includes(\"18:00:00\")\n      );\n      console.log(\"DailyData\", dailyData);\n      this.setState(\n        {\n          dailyData: dailyData,\n          city: data.city.name,\n          country: data.city.country,\n          feels_like: data.list[0].main.feels_like,\n          pressure: data.list[0].main.pressure,\n          humidity: data.list[0].main.humidity,\n          weatherDescription: data.list[0].weather[0].description,\n          weatherIcon: data.list[0].weather[0].icon,\n          date: data.list[0].dt_txt,\n        },\n        () => console.log(this.state)\n      );\n      // });\n      // } catch (e) {\n      //   console.log(\"Error in API request of Forecast component.\", e);\n      // }\n    }\n  };\n\n  weatherDaysCardsRender = (celsius) => {\n    return this.state.dailyData.map((reading, index) => (\n      <WeatherDayCard\n        reading={reading}\n        key={index}\n        city={this.state.city}\n        celsius={celsius}\n      />\n    ));\n  };\n\n  render() {\n    return (\n      <div className={this.props.forecastClass}>\n        <div id=\"go-back-arrow\" onClick={this.props.onClick}>\n          <img\n            src={process.env.PUBLIC_URL + \"/img/back-arrow.png\"}\n            placeholder=\"img\"\n            alt=\"img\"\n          />\n        </div>\n        <div key={this.state.temperature} className=\"cards-container\">\n          {this.weatherDaysCardsRender(this.props.celsius)}\n        </div>\n        <div className=\"intervals-button\">\n          <div>3-hour intervals</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}