{"ast":null,"code":"var _jsxFileName = \"/home/enzo/dev/projects/chasacademy/current/style/src/components/HourlyWeather.jsx\";\nimport React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport \"../hourlyWeather.css\";\nimport moment from \"moment\";\nimport config from \"../config.json\";\nimport { getCountry } from \"../services/citiesService\";\nimport { AreaChart, Area, XAxis, YAxis, Tooltip } from \"recharts\";\n\nclass HourlyWeather extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fullData: [],\n      city: \"\",\n      country: \"\",\n      celsius: true,\n      fahrenheit: false,\n      temps: [],\n      weatherChartsData: {},\n      validRequest: true\n    };\n\n    this.getForecast = celsius => {\n      if (this.props.match.params.id) {\n        try {\n          const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.match.params.id}&appid=${config.API_KEY}`;\n          fetch(weatherURL).then(res => res.json()).then(data => {\n            // const data = require(`../assets/forecast.json`);\n            if (Object.keys(data).length > 2) {\n              const fullData = data[\"list\"];\n              const city = data[\"city\"][\"name\"];\n              const country = getCountry(data[\"city\"][\"country\"]);\n              this.setState({\n                fullData,\n                city,\n                country\n              });\n              this.getTemps(fullData, celsius);\n            }\n          });\n        } catch (e) {\n          this.setState({\n            validRequest: false\n          });\n          console.log(\"Error in API request of Forecast component.\", e);\n        }\n      }\n    };\n\n    this.weather3Hours = () => {\n      const interval = this.state.fullData.map((full, index) => {\n        let newDate = new Date();\n        const weekday = full.dt * 1000;\n        newDate.setTime(weekday);\n        const icon = full.weather[0].icon.slice(0, 2).toString();\n        const imgURL = process.env.PUBLIC_URL + \"/img/\" + icon + \".png\";\n        return this.fullWeatherDetailRender(newDate, full, imgURL, this.state.celsius, index);\n      });\n      return interval;\n    };\n\n    this.fullWeatherDetailRender = (newDate, full, imgURL, celsius, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"data-time\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        className: \"info-day\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }\n      }, moment(newDate).format(\"dddd\")), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"text-muted\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }\n      }, moment(newDate).format(\"MMMM Do\")), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"hour\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }\n      }, moment(newDate).format(\"LT\"))), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"conditions\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }\n      }, full.weather[0].description), /*#__PURE__*/React.createElement(\"img\", {\n        className: \"weatherIcon\",\n        src: imgURL,\n        alt: \"weather icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"temp\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      }, celsius && Math.round(full.main.temp - 272.15), celsius && \"°C\", celsius || Math.round(full.main.temp * 9 / 5 - 459.67), celsius || \"°F\")), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"Humidity\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      }, \"Humidity: \", full.main.humidity, \" %\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"windSpeed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      }, \"Wind: \", full.wind.speed, \" kmh \")));\n    };\n\n    this.displayF = () => {\n      this.setState({\n        celsius: false,\n        fahrenheit: true\n      });\n      this.getForecast(false);\n    };\n\n    this.displayC = () => {\n      this.setState({\n        celsius: true,\n        fahrenheit: false\n      });\n      this.getForecast(true);\n    };\n\n    this.getTemps = (fullData, celsius) => {\n      let temps = [];\n      fullData.forEach((full, index) => {\n        temps[index] = {\n          temperature: celsius === \"true\" || celsius === true ? Math.round(full.main.temp - 272.15) : Math.round(full.main.temp * 9 / 5 - 459.67),\n          name: moment(full.dt_txt).format(\"dddd\")\n        };\n      });\n      this.setState({\n        temps\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.match.params.celsius === \"false\" || this.props.match.params.celsius === false) {\n      this.setState({\n        celsius: false,\n        fahrenheit: true\n      });\n      this.getForecast(false);\n    } else {\n      this.getForecast(true);\n    }\n  }\n\n  render() {\n    const weatherChartsData = this.state.temps;\n    const {\n      celsius,\n      fahrenheit,\n      city,\n      country\n    } = this.state;\n    console.log(\"valid request\", validRequest);\n\n    if (!this.state.validRequest) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/not-found\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 14\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(\"main\", {\n        className: \"home-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"details-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }\n      }, city, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }\n      }, country)), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.displayC,\n        disabled: celsius,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }\n      }, \"\\xB0C\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.displayF,\n        disabled: fahrenheit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 15\n        }\n      }, \"\\xB0F\")), /*#__PURE__*/React.createElement(AreaChart, {\n        width: 900,\n        height: 300,\n        data: weatherChartsData,\n        margin: {\n          top: 10,\n          right: 30,\n          left: 0,\n          bottom: 0\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(XAxis, {\n        dataKey: \"name\",\n        stroke: \"white\",\n        interval: 8,\n        padding: {\n          left: 2,\n          right: 2\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(YAxis, {\n        stroke: \"white\",\n        domain: [\"dataMin - 1\", \"dataMax + 3\"],\n        padding: {\n          top: 1,\n          bottom: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Tooltip, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Area, {\n        type: \"monotone\",\n        dataKey: \"temperature\",\n        stroke: \"#44337a\",\n        fill: \"#44337a\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"weather-hours\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }\n      }, this.weather3Hours())));\n    }\n  }\n\n}\n\nexport default HourlyWeather;","map":{"version":3,"sources":["/home/enzo/dev/projects/chasacademy/current/style/src/components/HourlyWeather.jsx"],"names":["React","Component","Redirect","moment","config","getCountry","AreaChart","Area","XAxis","YAxis","Tooltip","HourlyWeather","state","fullData","city","country","celsius","fahrenheit","temps","weatherChartsData","validRequest","getForecast","props","match","params","id","weatherURL","API_KEY","fetch","then","res","json","data","Object","keys","length","setState","getTemps","e","console","log","weather3Hours","interval","map","full","index","newDate","Date","weekday","dt","setTime","icon","weather","slice","toString","imgURL","process","env","PUBLIC_URL","fullWeatherDetailRender","format","description","Math","round","main","temp","humidity","wind","speed","displayF","displayC","forEach","temperature","name","dt_txt","componentDidMount","render","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport \"../hourlyWeather.css\";\nimport moment from \"moment\";\nimport config from \"../config.json\";\nimport { getCountry } from \"../services/citiesService\";\nimport { AreaChart, Area, XAxis, YAxis, Tooltip } from \"recharts\";\n\nclass HourlyWeather extends Component {\n  state = {\n    fullData: [],\n    city: \"\",\n    country: \"\",\n    celsius: true,\n    fahrenheit: false,\n    temps: [],\n    weatherChartsData: {},\n    validRequest: true,\n  };\n\n  componentDidMount() {\n    if (\n      this.props.match.params.celsius === \"false\" ||\n      this.props.match.params.celsius === false\n    ) {\n      this.setState({ celsius: false, fahrenheit: true });\n      this.getForecast(false);\n    } else {\n      this.getForecast(true);\n    }\n  }\n  getForecast = (celsius) => {\n    if (this.props.match.params.id) {\n      try {\n        const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.match.params.id}&appid=${config.API_KEY}`;\n        fetch(weatherURL)\n          .then((res) => res.json())\n          .then((data) => {\n            // const data = require(`../assets/forecast.json`);\n            if (Object.keys(data).length > 2) {\n              const fullData = data[\"list\"];\n              const city = data[\"city\"][\"name\"];\n              const country = getCountry(data[\"city\"][\"country\"]);\n              this.setState({\n                fullData,\n                city,\n                country,\n              });\n              this.getTemps(fullData, celsius);\n            }\n          });\n      } catch (e) {\n        this.setState({ validRequest: false });\n        console.log(\"Error in API request of Forecast component.\", e);\n      }\n    }\n  };\n\n  weather3Hours = () => {\n    const interval = this.state.fullData.map((full, index) => {\n      let newDate = new Date();\n      const weekday = full.dt * 1000;\n      newDate.setTime(weekday);\n      const icon = full.weather[0].icon.slice(0, 2).toString();\n      const imgURL = process.env.PUBLIC_URL + \"/img/\" + icon + \".png\";\n      return this.fullWeatherDetailRender(\n        newDate,\n        full,\n        imgURL,\n        this.state.celsius,\n        index\n      );\n    });\n    return interval;\n  };\n\n  fullWeatherDetailRender = (newDate, full, imgURL, celsius, index) => {\n    return (\n      <div key={index} className=\"container\">\n        <div className=\"info\">\n          <div className=\"data-time\">\n            <h3 className=\"info-day\">{moment(newDate).format(\"dddd\")}</h3>\n            <p className=\"text-muted\">{moment(newDate).format(\"MMMM Do\")}</p>\n            <p className=\"hour\">{moment(newDate).format(\"LT\")}</p>\n          </div>\n          <p className=\"conditions\">{full.weather[0].description}</p>\n          <img className=\"weatherIcon\" src={imgURL} alt=\"weather icon\"></img>\n          <p className=\"temp\">\n            <span>\n              {celsius && Math.round(full.main.temp - 272.15)}\n              {celsius && \"°C\"}\n              {celsius || Math.round((full.main.temp * 9) / 5 - 459.67)}\n              {celsius || \"°F\"}\n            </span>\n          </p>\n          <p className=\"Humidity\">Humidity: {full.main.humidity} %</p>\n          <p className=\"windSpeed\">Wind: {full.wind.speed} kmh </p>\n        </div>\n      </div>\n    );\n  };\n\n  displayF = () => {\n    this.setState({\n      celsius: false,\n      fahrenheit: true,\n    });\n    this.getForecast(false);\n  };\n\n  displayC = () => {\n    this.setState({\n      celsius: true,\n      fahrenheit: false,\n    });\n    this.getForecast(true);\n  };\n\n  getTemps = (fullData, celsius) => {\n    let temps = [];\n    fullData.forEach((full, index) => {\n      temps[index] = {\n        temperature:\n          celsius === \"true\" || celsius === true\n            ? Math.round(full.main.temp - 272.15)\n            : Math.round((full.main.temp * 9) / 5 - 459.67),\n        name: moment(full.dt_txt).format(\"dddd\"),\n      };\n    });\n    this.setState({ temps });\n  };\n\n  render() {\n    const weatherChartsData = this.state.temps;\n    const { celsius, fahrenheit, city, country } = this.state;\n    console.log(\"valid request\", validRequest);\n    if (!this.state.validRequest) {\n      return <Redirect to=\"/not-found\" />;\n    } else {\n      return (\n        <main className=\"home-container\">\n          <div className=\"details-container\">\n            <h2>\n              {city}\n              <span>{country}</span>\n            </h2>\n            <div>\n              <button onClick={this.displayC} disabled={celsius}>\n                °C\n              </button>\n              <button onClick={this.displayF} disabled={fahrenheit}>\n                °F\n              </button>\n            </div>\n            <AreaChart\n              width={900}\n              height={300}\n              data={weatherChartsData}\n              margin={{\n                top: 10,\n                right: 30,\n                left: 0,\n                bottom: 0,\n              }}\n            >\n              <XAxis\n                dataKey=\"name\"\n                stroke={\"white\"}\n                interval={8}\n                padding={{ left: 2, right: 2 }}\n              />\n              <YAxis\n                stroke={\"white\"}\n                domain={[\"dataMin - 1\", \"dataMax + 3\"]}\n                padding={{ top: 1, bottom: 1 }}\n              />\n              <Tooltip />\n              <Area\n                type=\"monotone\"\n                dataKey=\"temperature\"\n                stroke=\"#44337a\"\n                fill=\"#44337a\"\n              />\n            </AreaChart>\n\n            <div className=\"weather-hours\">{this.weather3Hours()}</div>\n          </div>\n        </main>\n      );\n    }\n  }\n}\n\nexport default HourlyWeather;\n"]},"metadata":{},"sourceType":"module"}