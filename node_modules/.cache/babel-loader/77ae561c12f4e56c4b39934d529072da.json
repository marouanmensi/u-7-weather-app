{"ast":null,"code":"var _jsxFileName = \"/home/dev/chasacademy/current/style/src/components/Weather.jsx\";\nimport React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport Forecast from \"./Forecast\";\nimport { getCountry } from \"../services/citiesService\";\n\nclass Weather extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temperature: \"\",\n      tempMax: \"\",\n      tempMin: \"\",\n      city: \"\",\n      cityId: 2673730,\n      country: \"\",\n      humidity: \"\",\n      wind: \"\",\n      description: \"\",\n      sunrise: \"\",\n      sunset: \"\",\n      icon: \"\",\n      celsius: true,\n      fahrenheit: false,\n      error: \"\",\n      forecastClass: \"forecast-container-hidden\"\n    };\n\n    this.getWeather = async () => {\n      try {\n        let fetchUrl = \"\";\n\n        if (!this.props.cityId) {\n          fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.state.cityId}&appid=${config.API_KEY}`;\n          console.log(\"fetchUrl.using.stockholm:\", fetchUrl);\n        } else {\n          fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.props.cityId}&appid=${config.API_KEY}`;\n          this.setState({\n            cityId: this.props.cityId\n          });\n          console.log(\"fetchUrl.from.props:\", fetchUrl);\n        }\n\n        const api = await fetch(fetchUrl);\n        const data = await api.json(); // const data = require(`../assets/stockholm.json`);\n\n        if (data) {\n          this.setState({\n            city: data.name,\n            country: getCountry(data.sys.country),\n            temperature: Math.round(data.main.temp - 273.15),\n            tempMax: Math.round(data.main.temp_max - 273.15),\n            tempMin: Math.round(data.main.temp_min - 273.15),\n            humidity: data.main.humidity,\n            wind: data.wind.speed,\n            description: data.weather[0].description,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            icon: data.weather[0].icon,\n            error: \"\"\n          });\n        }\n      } catch (e) {\n        console.log(\"Error in getWeather function of Weather component.\", e);\n      }\n    };\n\n    this.displayF = () => {\n      this.setState({\n        celsius: false,\n        fahrenheit: true,\n        temperature: Math.round(this.state.temperature * 9 / 5 + 32),\n        tempMin: Math.round(this.state.tempMin * 9 / 5 + 32),\n        tempMax: Math.round(this.state.tempMax * 9 / 5 + 32)\n      });\n    };\n\n    this.displayC = () => {\n      this.setState({\n        celsius: true,\n        fahrenheit: false,\n        temperature: Math.round((this.state.temperature - 32) * (5 / 9)),\n        tempMin: Math.round((this.state.tempMin - 32) * (5 / 9)),\n        tempMax: Math.round((this.state.tempMax - 32) * (5 / 9))\n      });\n    };\n\n    this.handleReturn = () => {\n      this.setState({\n        forecastClass: \"forecast-container-hidden\"\n      });\n    };\n\n    this.handleClick = () => {\n      this.setState({\n        forecastClass: \"forecast-container\"\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getWeather();\n  }\n\n  render() {\n    const {\n      sunrise,\n      sunset,\n      description,\n      wind,\n      humidity,\n      temperature,\n      tempMin,\n      tempMax,\n      country,\n      city,\n      icon,\n      celsius,\n      fahrenheit,\n      error,\n      forecastClass\n    } = this.state;\n    const sunsriseClock = new Date(sunrise * 1000).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n    const sunsetClock = new Date(sunset * 1000).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n    const weatherCode = icon.slice(0, 2).toString();\n    let cityId = \"\";\n\n    if (this.props.cityId) {\n      cityId = this.props.cityId;\n    } else {\n      cityId = this.state.cityId;\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"weather-container\",\n      key: cityId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }, city, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }, \" \", country)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"weather-overview\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, temperature, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.displayC,\n      disabled: celsius,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 15\n      }\n    }, \"\\xB0C\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.displayF,\n      disabled: fahrenheit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 15\n      }\n    }, \"\\xB0F\")), /*#__PURE__*/React.createElement(\"img\", {\n      src: process.env.PUBLIC_URL + \"/img/\" + weatherCode + \".png\",\n      placeholder: \"img\",\n      alt: \"img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"weather-description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    }, description), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"daily-temp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 15\n      }\n    }, tempMin, celsius && \"째C\", celsius || \"째F\"), \"Min\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"daily-temp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 15\n      }\n    }, tempMax, celsius && \"째C\", celsius || \"째F\"), \"Max\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 15\n      }\n    }, humidity, \"%\"), \"Humidity\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 15\n      }\n    }, wind, \" mph\"), \"Wind\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 15\n      }\n    }, sunsriseClock), \"Sunrise\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 15\n      }\n    }, sunsetClock.slice(0)), \"Sunset\")), error && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }\n    }, \"error :\", error), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"weather-extra\",\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }\n    }, \"5-day forecast\"))), /*#__PURE__*/React.createElement(Forecast, {\n      forecastClass: forecastClass,\n      cityId: cityId,\n      onClick: this.handleReturn,\n      celsius: celsius,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Weather;","map":{"version":3,"sources":["/home/dev/chasacademy/current/style/src/components/Weather.jsx"],"names":["React","Component","config","Forecast","getCountry","Weather","state","temperature","tempMax","tempMin","city","cityId","country","humidity","wind","description","sunrise","sunset","icon","celsius","fahrenheit","error","forecastClass","getWeather","fetchUrl","props","API_KEY","console","log","setState","api","fetch","data","json","name","sys","Math","round","main","temp","temp_max","temp_min","speed","weather","e","displayF","displayC","handleReturn","handleClick","componentDidMount","render","sunsriseClock","Date","toLocaleTimeString","hour","minute","sunsetClock","weatherCode","slice","toString","process","env","PUBLIC_URL"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport Forecast from \"./Forecast\";\nimport { getCountry } from \"../services/citiesService\";\n\nclass Weather extends Component {\n  state = {\n    temperature: \"\",\n    tempMax: \"\",\n    tempMin: \"\",\n    city: \"\",\n    cityId: 2673730,\n    country: \"\",\n    humidity: \"\",\n    wind: \"\",\n    description: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    icon: \"\",\n    celsius: true,\n    fahrenheit: false,\n    error: \"\",\n    forecastClass: \"forecast-container-hidden\",\n  };\n\n  componentDidMount() {\n    this.getWeather();\n  }\n\n  getWeather = async () => {\n    try {\n      let fetchUrl = \"\";\n      if (!this.props.cityId) {\n        fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.state.cityId}&appid=${config.API_KEY}`;\n        console.log(\"fetchUrl.using.stockholm:\", fetchUrl);\n      } else {\n        fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.props.cityId}&appid=${config.API_KEY}`;\n        this.setState({ cityId: this.props.cityId });\n        console.log(\"fetchUrl.from.props:\", fetchUrl);\n      }\n      const api = await fetch(fetchUrl);\n      const data = await api.json();\n      // const data = require(`../assets/stockholm.json`);\n      if (data) {\n        this.setState({\n          city: data.name,\n          country: getCountry(data.sys.country),\n          temperature: Math.round(data.main.temp - 273.15),\n          tempMax: Math.round(data.main.temp_max - 273.15),\n          tempMin: Math.round(data.main.temp_min - 273.15),\n          humidity: data.main.humidity,\n          wind: data.wind.speed,\n          description: data.weather[0].description,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          icon: data.weather[0].icon,\n          error: \"\",\n        });\n      }\n    } catch (e) {\n      console.log(\"Error in getWeather function of Weather component.\", e);\n    }\n  };\n\n  displayF = () => {\n    this.setState({\n      celsius: false,\n      fahrenheit: true,\n      temperature: Math.round((this.state.temperature * 9) / 5 + 32),\n      tempMin: Math.round((this.state.tempMin * 9) / 5 + 32),\n      tempMax: Math.round((this.state.tempMax * 9) / 5 + 32),\n    });\n  };\n\n  displayC = () => {\n    this.setState({\n      celsius: true,\n      fahrenheit: false,\n      temperature: Math.round((this.state.temperature - 32) * (5 / 9)),\n      tempMin: Math.round((this.state.tempMin - 32) * (5 / 9)),\n      tempMax: Math.round((this.state.tempMax - 32) * (5 / 9)),\n    });\n  };\n\n  handleReturn = () => {\n    this.setState({ forecastClass: \"forecast-container-hidden\" });\n  };\n\n  handleClick = () => {\n    this.setState({ forecastClass: \"forecast-container\" });\n  };\n\n  render() {\n    const {\n      sunrise,\n      sunset,\n      description,\n      wind,\n      humidity,\n      temperature,\n      tempMin,\n      tempMax,\n      country,\n      city,\n      icon,\n      celsius,\n      fahrenheit,\n      error,\n      forecastClass,\n    } = this.state;\n    const sunsriseClock = new Date(sunrise * 1000).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n    const sunsetClock = new Date(sunset * 1000).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n    const weatherCode = icon.slice(0, 2).toString();\n    let cityId = \"\";\n    if (this.props.cityId) {\n      cityId = this.props.cityId;\n    } else {\n      cityId = this.state.cityId;\n    }\n\n    return (\n      <React.Fragment>\n        <div className=\"weather-container\" key={cityId}>\n          <h2>\n            {city}\n            <span> {country}</span>\n          </h2>\n          <div className=\"weather-overview\">\n            <span>\n              {temperature}\n              <button onClick={this.displayC} disabled={celsius}>\n                째C\n              </button>\n              <button onClick={this.displayF} disabled={fahrenheit}>\n                째F\n              </button>\n            </span>\n            <img\n              src={process.env.PUBLIC_URL + \"/img/\" + weatherCode + \".png\"}\n              placeholder=\"img\"\n              alt=\"img\"\n            />\n          </div>\n          <div id=\"weather-description\">{description}</div>\n          <ul>\n            <li>\n              <span className=\"daily-temp\">\n                {tempMin}\n                {celsius && \"째C\"}\n                {celsius || \"째F\"}\n              </span>\n              Min\n            </li>\n            <li>\n              <span className=\"daily-temp\">\n                {tempMax}\n                {celsius && \"째C\"}\n                {celsius || \"째F\"}\n              </span>\n              Max\n            </li>\n            <li>\n              <span>{humidity}%</span>Humidity\n            </li>\n            <li>\n              <span>{wind} mph</span>Wind\n            </li>\n            <li>\n              <span>{sunsriseClock}</span>Sunrise\n            </li>\n            <li>\n              <span>{sunsetClock.slice(0)}</span>Sunset\n            </li>\n          </ul>\n          {error && <p>error :{error}</p>}\n          <div className=\"weather-extra\" onClick={this.handleClick}>\n            <div>5-day forecast</div>\n          </div>\n        </div>\n        <Forecast\n          forecastClass={forecastClass}\n          cityId={cityId}\n          onClick={this.handleReturn}\n          celsius={celsius}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}