{"ast":null,"code":"var _jsxFileName = \"/home/enzo/dev/projects/chasacademy/current/style/src/components/HourlyWeather.jsx\";\nimport React, { Component } from \"react\";\nimport \"../hourlyWeather.css\";\nimport moment from \"moment\";\nimport config from \"../config.json\";\nimport { getCountry } from \"../services/citiesService\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\nimport Forecast from \"./Forecast\";\n\nclass HourlyWeather extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fullData: [],\n      city: \"\",\n      country: \"\",\n      celsius: true,\n      fahrenheit: false\n    };\n\n    this.getForecast = () => {\n      if (this.props.match.params.id) {\n        try {\n          const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.match.params.id}&appid=${config.API_KEY}`;\n          let forecast = new Forecast();\n          fetch(weatherURL).then(res => res.json()).then(data => {\n            // const data = require(`../assets/forecast.json`);\n            const {\n              maxTemps,\n              minTemps,\n              descriptions,\n              icons\n            } = forecast.dailyValues(data.list);\n            console.log(\"maxTemps\", maxTemps);\n            const fullData = data[\"list\"];\n            const city = data[\"city\"][\"name\"];\n            const country = getCountry(data[\"city\"][\"country\"]);\n            this.setState({\n              fullData,\n              city,\n              country\n            }, () => console.log(\"STATE\", this.state));\n          });\n        } catch (e) {\n          console.log(\"Error in API request of Forecast component.\", e);\n        }\n      }\n    };\n\n    this.weather3Hours = () => {\n      const interval = this.state.fullData.map(full => {\n        let newDate = new Date();\n        const weekday = full.dt * 1000;\n        newDate.setTime(weekday);\n        const icon = full.weather[0].icon.slice(0, 2).toString();\n        const imgURL = process.env.PUBLIC_URL + \"/img/\" + icon + \".png\";\n        return this.fullWeatherDetailRender(newDate, full, imgURL, this.state.celsius);\n      });\n      return interval;\n    };\n\n    this.fullWeatherDetailRender = (newDate, full, imgURL, celsius, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"data-time\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        className: \"info-day\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }\n      }, moment(newDate).format(\"dddd\")), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"text-muted\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }\n      }, moment(newDate).format(\"MMMM Do\")), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"hour\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }\n      }, moment(newDate).format(\"LT\"))), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"conditions\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }\n      }, full.weather[0].description), /*#__PURE__*/React.createElement(\"img\", {\n        className: \"weatherIcon\",\n        src: imgURL,\n        alt: \"weather icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"temp\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }\n      }, celsius && Math.round(full.main.temp - 272.15), celsius && \"°C\", celsius || Math.round(full.main.temp * 9 / 5 - 459.67), celsius || \"°F\")), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"Humidity\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }\n      }, \"Humidity: \", full.main.humidity, \" %\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"windSpeed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }\n      }, \"Wind: \", full.wind.speed, \" kmh \")));\n    };\n\n    this.displayF = () => {\n      this.setState({\n        celsius: false,\n        fahrenheit: true\n      });\n    };\n\n    this.displayC = () => {\n      this.setState({\n        celsius: true,\n        fahrenheit: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.match.params.celsius === \"false\") {\n      this.setState({\n        celsius: false,\n        fahrenheit: true\n      });\n    }\n\n    this.getForecast();\n  }\n\n  render() {\n    const weatherChartsData = [{\n      name: moment(this.state.dateDay1).format(\"dddd\"),\n      temp: Math.round(this.state.tempDay1)\n    }, {\n      name: moment(this.state.dateDay2).format(\"dddd\"),\n      temp: Math.round(this.state.tempDay2)\n    }, {\n      name: moment(this.state.dateDay3).format(\"dddd\"),\n      temp: Math.round(this.state.tempDay3)\n    }, {\n      name: moment(this.state.dateDay4).format(\"dddd\"),\n      temp: Math.round(this.state.tempDay4)\n    }, {\n      name: moment(this.state.dateDay5).format(\"dddd\"),\n      temp: Math.round(this.state.tempDay5)\n    }];\n    const {\n      celsius,\n      fahrenheit,\n      city,\n      country\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"main\", {\n      className: \"home-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"details-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }, city, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }, country)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.displayC,\n      disabled: celsius,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    }, \"\\xB0C\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.displayF,\n      disabled: fahrenheit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, \"\\xB0F\")), /*#__PURE__*/React.createElement(LineChart, {\n      width: 600,\n      height: 300,\n      data: weatherChartsData,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"temp\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"weather-hours\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }\n    }, this.weather3Hours())));\n  }\n\n}\n\nexport default HourlyWeather;","map":{"version":3,"sources":["/home/enzo/dev/projects/chasacademy/current/style/src/components/HourlyWeather.jsx"],"names":["React","Component","moment","config","getCountry","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Forecast","HourlyWeather","state","fullData","city","country","celsius","fahrenheit","getForecast","props","match","params","id","weatherURL","API_KEY","forecast","fetch","then","res","json","data","maxTemps","minTemps","descriptions","icons","dailyValues","list","console","log","setState","e","weather3Hours","interval","map","full","newDate","Date","weekday","dt","setTime","icon","weather","slice","toString","imgURL","process","env","PUBLIC_URL","fullWeatherDetailRender","index","format","description","Math","round","main","temp","humidity","wind","speed","displayF","displayC","componentDidMount","render","weatherChartsData","name","dateDay1","tempDay1","dateDay2","tempDay2","dateDay3","tempDay3","dateDay4","tempDay4","dateDay5","tempDay5","top","right","left","bottom","r"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"../hourlyWeather.css\";\nimport moment from \"moment\";\nimport config from \"../config.json\";\nimport { getCountry } from \"../services/citiesService\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\nimport Forecast from \"./Forecast\";\n\nclass HourlyWeather extends Component {\n  state = {\n    fullData: [],\n    city: \"\",\n    country: \"\",\n    celsius: true,\n    fahrenheit: false,\n  };\n\n  componentDidMount() {\n    if (this.props.match.params.celsius === \"false\") {\n      this.setState({ celsius: false, fahrenheit: true });\n    }\n    this.getForecast();\n  }\n  getForecast = () => {\n    if (this.props.match.params.id) {\n      try {\n        const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.match.params.id}&appid=${config.API_KEY}`;\n\n        let forecast = new Forecast();\n\n        fetch(weatherURL)\n          .then((res) => res.json())\n          .then((data) => {\n            // const data = require(`../assets/forecast.json`);\n            const {\n              maxTemps,\n              minTemps,\n              descriptions,\n              icons,\n            } = forecast.dailyValues(data.list);\n            console.log(\"maxTemps\", maxTemps);\n            const fullData = data[\"list\"];\n            const city = data[\"city\"][\"name\"];\n            const country = getCountry(data[\"city\"][\"country\"]);\n            this.setState(\n              {\n                fullData,\n                city,\n                country,\n              },\n              () => console.log(\"STATE\", this.state)\n            );\n          });\n      } catch (e) {\n        console.log(\"Error in API request of Forecast component.\", e);\n      }\n    }\n  };\n\n  weather3Hours = () => {\n    const interval = this.state.fullData.map((full) => {\n      let newDate = new Date();\n      const weekday = full.dt * 1000;\n      newDate.setTime(weekday);\n      const icon = full.weather[0].icon.slice(0, 2).toString();\n      const imgURL = process.env.PUBLIC_URL + \"/img/\" + icon + \".png\";\n      return this.fullWeatherDetailRender(\n        newDate,\n        full,\n        imgURL,\n        this.state.celsius\n      );\n    });\n    return interval;\n  };\n\n  fullWeatherDetailRender = (newDate, full, imgURL, celsius, index) => {\n    return (\n      <div key={index} className=\"container\">\n        <div className=\"info\">\n          <div className=\"data-time\">\n            <h3 className=\"info-day\">{moment(newDate).format(\"dddd\")}</h3>\n            <p className=\"text-muted\">{moment(newDate).format(\"MMMM Do\")}</p>\n            <p className=\"hour\">{moment(newDate).format(\"LT\")}</p>\n          </div>\n          <p className=\"conditions\">{full.weather[0].description}</p>\n          <img className=\"weatherIcon\" src={imgURL} alt=\"weather icon\"></img>\n          <p className=\"temp\">\n            <span>\n              {celsius && Math.round(full.main.temp - 272.15)}\n              {celsius && \"°C\"}\n              {celsius || Math.round((full.main.temp * 9) / 5 - 459.67)}\n              {celsius || \"°F\"}\n            </span>\n          </p>\n          <p className=\"Humidity\">Humidity: {full.main.humidity} %</p>\n          <p className=\"windSpeed\">Wind: {full.wind.speed} kmh </p>\n        </div>\n      </div>\n    );\n  };\n\n  displayF = () => {\n    this.setState({\n      celsius: false,\n      fahrenheit: true,\n    });\n  };\n\n  displayC = () => {\n    this.setState({\n      celsius: true,\n      fahrenheit: false,\n    });\n  };\n\n  render() {\n    const weatherChartsData = [\n      {\n        name: moment(this.state.dateDay1).format(\"dddd\"),\n        temp: Math.round(this.state.tempDay1),\n      },\n      {\n        name: moment(this.state.dateDay2).format(\"dddd\"),\n        temp: Math.round(this.state.tempDay2),\n      },\n      {\n        name: moment(this.state.dateDay3).format(\"dddd\"),\n        temp: Math.round(this.state.tempDay3),\n      },\n      {\n        name: moment(this.state.dateDay4).format(\"dddd\"),\n        temp: Math.round(this.state.tempDay4),\n      },\n      {\n        name: moment(this.state.dateDay5).format(\"dddd\"),\n        temp: Math.round(this.state.tempDay5),\n      },\n    ];\n    const { celsius, fahrenheit, city, country } = this.state;\n    return (\n      <main className=\"home-container\">\n        <div className=\"details-container\">\n          <h2>\n            {city}\n            <span>{country}</span>\n          </h2>\n          <div>\n            <button onClick={this.displayC} disabled={celsius}>\n              °C\n            </button>\n            <button onClick={this.displayF} disabled={fahrenheit}>\n              °F\n            </button>\n          </div>\n          <LineChart\n            width={600}\n            height={300}\n            data={weatherChartsData}\n            margin={{\n              top: 5,\n              right: 30,\n              left: 20,\n              bottom: 5,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line\n              type=\"monotone\"\n              dataKey=\"temp\"\n              stroke=\"#8884d8\"\n              activeDot={{ r: 8 }}\n            />\n          </LineChart>\n          <div className=\"weather-hours\">{this.weather3Hours()}</div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default HourlyWeather;\n"]},"metadata":{},"sourceType":"module"}