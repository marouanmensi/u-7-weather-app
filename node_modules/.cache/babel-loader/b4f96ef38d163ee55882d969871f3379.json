{"ast":null,"code":"var _jsxFileName = \"/home/enzo/dev/projects/chasacademy/current/style/src/components/Weather.jsx\";\nimport React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport config from \"../config.json\";\nimport Forecast from \"./Forecast\";\nimport { getCountry } from \"../services/citiesService\";\n\nclass Weather extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temperature: \"\",\n      tempMax: \"\",\n      tempMin: \"\",\n      city: \"\",\n      cityId: 2673730,\n      country: \"\",\n      humidity: \"\",\n      wind: \"\",\n      description: \"\",\n      sunrise: \"\",\n      sunset: \"\",\n      icon: \"\",\n      celsius: true,\n      fahrenheit: false,\n      lat: null,\n      lon: null,\n      error: \"\",\n      forecastClass: \"forecast-container-hidden\",\n      validRequest: true\n    };\n\n    this.getPosition = options => {\n      return new Promise(function (resolve, reject) {\n        navigator.geolocation.getCurrentPosition(resolve, reject, options);\n      });\n    };\n\n    this.loadDefault = () => {\n      if (!this.state.lat && !this.state.lon) {\n        this.getWeather(false, false);\n      }\n    };\n\n    this.getWeather = async (lat, lon) => {\n      try {\n        let fetchUrl = \"\";\n\n        if (lat && lon) {\n          fetchUrl = `//api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${config.API_KEY}`;\n          console.log(\"fetchUrl.using.latlon:\", fetchUrl);\n        } else if (!this.props.cityId) {\n          fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.state.cityId}&appid=${config.API_KEY}`;\n          console.log(\"fetchUrl.using.stockholm:\", fetchUrl);\n        } else {\n          fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.props.cityId}&appid=${config.API_KEY}`;\n          this.setState({\n            cityId: this.props.cityId\n          });\n          console.log(\"fetchUrl.using.props:\", fetchUrl);\n        }\n\n        const api = await fetch(fetchUrl);\n        const data = await api.json(); // const data = require(`../assets/stockholm.json`);\n\n        if (data) {\n          this.setState({\n            lat: lat,\n            lon: lon,\n            city: data.name,\n            country: getCountry(data.sys.country),\n            temperature: Math.round(data.main.temp - 273.15),\n            tempMax: Math.round(data.main.temp_max - 273.15),\n            tempMin: Math.round(data.main.temp_min - 273.15),\n            humidity: data.main.humidity,\n            wind: data.wind.speed,\n            description: data.weather[0].description,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            icon: data.weather[0].icon,\n            error: \"\"\n          });\n        }\n      } catch (e) {\n        this.setState({\n          validRequest: false\n        });\n      }\n    };\n\n    this.displayF = () => {\n      this.setState({\n        celsius: false,\n        fahrenheit: true,\n        temperature: Math.round(this.state.temperature * 9 / 5 + 32),\n        tempMin: Math.round(this.state.tempMin * 9 / 5 + 32),\n        tempMax: Math.round(this.state.tempMax * 9 / 5 + 32)\n      });\n    };\n\n    this.displayC = () => {\n      this.setState({\n        celsius: true,\n        fahrenheit: false,\n        temperature: Math.round((this.state.temperature - 32) * (5 / 9)),\n        tempMin: Math.round((this.state.tempMin - 32) * (5 / 9)),\n        tempMax: Math.round((this.state.tempMax - 32) * (5 / 9))\n      });\n    };\n\n    this.handleReturn = () => {\n      this.setState({\n        forecastClass: \"forecast-container-hidden\"\n      });\n    };\n\n    this.handleClick = () => {\n      this.setState({\n        forecastClass: \"forecast-container\"\n      });\n    };\n\n    this.checkRequest = () => {\n      this.state.validRequest ? true : false;\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.cityId) {\n      if (navigator.geolocation) {\n        this.getPosition().then(position => {\n          this.setState({\n            lat: position.coords.latitude,\n            lon: position.coords.longitude\n          });\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        }).catch(err => {\n          this.setState({\n            errorMessage: err.message\n          });\n        });\n      } else {\n        this.getWeather(false, false);\n      }\n\n      this.loadDefault();\n    } else {\n      this.getWeather(false, false);\n    }\n  }\n\n  render() {\n    const {\n      sunrise,\n      sunset,\n      description,\n      wind,\n      humidity,\n      temperature,\n      tempMin,\n      tempMax,\n      country,\n      city,\n      icon,\n      celsius,\n      fahrenheit,\n      error,\n      forecastClass,\n      validRequest\n    } = this.state;\n    const sunsriseClock = new Date(sunrise * 1000).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n    const sunsetClock = new Date(sunset * 1000).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n    const weatherCode = icon.slice(0, 2).toString();\n    let cityId = \"\";\n\n    if (this.props.cityId) {\n      cityId = this.props.cityId;\n    } else {\n      cityId = this.state.cityId;\n    }\n\n    if (!this.state.validRequest) {\n      this.setState({\n        validRequest: false\n      });\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/not-found\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 14\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"weather-container\",\n        key: cityId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }\n      }, city, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }\n      }, \" \", country)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"weather-overview\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 15\n        }\n      }, temperature, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.displayC,\n        disabled: celsius,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 17\n        }\n      }, \"\\xB0C\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.displayF,\n        disabled: fahrenheit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 17\n        }\n      }, \"\\xB0F\")), /*#__PURE__*/React.createElement(\"img\", {\n        src: process.env.PUBLIC_URL + \"/img/\" + weatherCode + \".png\",\n        placeholder: \"img\",\n        alt: \"img\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"weather-description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }\n      }, description), /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"daily-temp\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 17\n        }\n      }, tempMin, celsius && \"째C\", celsius || \"째F\"), \"Min\"), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"daily-temp\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 17\n        }\n      }, tempMax, celsius && \"째C\", celsius || \"째F\"), \"Max\"), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 17\n        }\n      }, humidity, \"%\"), \"Humidity\"), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 17\n        }\n      }, wind, \" mph\"), \"Wind\"), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 17\n        }\n      }, sunsriseClock), \"Sunrise\"), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 17\n        }\n      }, sunsetClock.slice(0)), \"Sunset\")), error && /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 23\n        }\n      }, \"error :\", error), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"weather-extra\",\n        onClick: this.handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 15\n        }\n      }, \"5-day forecast\"))), /*#__PURE__*/React.createElement(Forecast, {\n        forecastClass: forecastClass,\n        cityId: cityId,\n        onClick: this.handleReturn,\n        celsius: celsius,\n        validRequest: this.checkRequest,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }\n      }));\n    }\n  }\n\n}\n\nexport default Weather;","map":{"version":3,"sources":["/home/enzo/dev/projects/chasacademy/current/style/src/components/Weather.jsx"],"names":["React","Component","Redirect","config","Forecast","getCountry","Weather","state","temperature","tempMax","tempMin","city","cityId","country","humidity","wind","description","sunrise","sunset","icon","celsius","fahrenheit","lat","lon","error","forecastClass","validRequest","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","loadDefault","getWeather","fetchUrl","API_KEY","console","log","props","setState","api","fetch","data","json","name","sys","Math","round","main","temp","temp_max","temp_min","speed","weather","e","displayF","displayC","handleReturn","handleClick","checkRequest","componentDidMount","then","position","coords","latitude","longitude","catch","err","errorMessage","message","render","sunsriseClock","Date","toLocaleTimeString","hour","minute","sunsetClock","weatherCode","slice","toString","process","env","PUBLIC_URL"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport config from \"../config.json\";\nimport Forecast from \"./Forecast\";\nimport { getCountry } from \"../services/citiesService\";\n\nclass Weather extends Component {\n  state = {\n    temperature: \"\",\n    tempMax: \"\",\n    tempMin: \"\",\n    city: \"\",\n    cityId: 2673730,\n    country: \"\",\n    humidity: \"\",\n    wind: \"\",\n    description: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    icon: \"\",\n    celsius: true,\n    fahrenheit: false,\n    lat: null,\n    lon: null,\n    error: \"\",\n    forecastClass: \"forecast-container-hidden\",\n    validRequest: true,\n  };\n\n  componentDidMount() {\n    if (!this.props.cityId) {\n      if (navigator.geolocation) {\n        this.getPosition()\n          .then((position) => {\n            this.setState({\n              lat: position.coords.latitude,\n              lon: position.coords.longitude,\n            });\n            this.getWeather(\n              position.coords.latitude,\n              position.coords.longitude\n            );\n          })\n          .catch((err) => {\n            this.setState({ errorMessage: err.message });\n          });\n      } else {\n        this.getWeather(false, false);\n      }\n      this.loadDefault();\n    } else {\n      this.getWeather(false, false);\n    }\n  }\n\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n\n  loadDefault = () => {\n    if (!this.state.lat && !this.state.lon) {\n      this.getWeather(false, false);\n    }\n  };\n\n  getWeather = async (lat, lon) => {\n    try {\n      let fetchUrl = \"\";\n      if (lat && lon) {\n        fetchUrl = `//api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${config.API_KEY}`;\n        console.log(\"fetchUrl.using.latlon:\", fetchUrl);\n      } else if (!this.props.cityId) {\n        fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.state.cityId}&appid=${config.API_KEY}`;\n        console.log(\"fetchUrl.using.stockholm:\", fetchUrl);\n      } else {\n        fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.props.cityId}&appid=${config.API_KEY}`;\n        this.setState({ cityId: this.props.cityId });\n        console.log(\"fetchUrl.using.props:\", fetchUrl);\n      }\n      const api = await fetch(fetchUrl);\n      const data = await api.json();\n\n      // const data = require(`../assets/stockholm.json`);\n      if (data) {\n        this.setState({\n          lat: lat,\n          lon: lon,\n          city: data.name,\n          country: getCountry(data.sys.country),\n          temperature: Math.round(data.main.temp - 273.15),\n          tempMax: Math.round(data.main.temp_max - 273.15),\n          tempMin: Math.round(data.main.temp_min - 273.15),\n          humidity: data.main.humidity,\n          wind: data.wind.speed,\n          description: data.weather[0].description,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          icon: data.weather[0].icon,\n          error: \"\",\n        });\n      }\n    } catch (e) {\n      this.setState({ validRequest: false });\n    }\n  };\n\n  displayF = () => {\n    this.setState({\n      celsius: false,\n      fahrenheit: true,\n      temperature: Math.round((this.state.temperature * 9) / 5 + 32),\n      tempMin: Math.round((this.state.tempMin * 9) / 5 + 32),\n      tempMax: Math.round((this.state.tempMax * 9) / 5 + 32),\n    });\n  };\n\n  displayC = () => {\n    this.setState({\n      celsius: true,\n      fahrenheit: false,\n      temperature: Math.round((this.state.temperature - 32) * (5 / 9)),\n      tempMin: Math.round((this.state.tempMin - 32) * (5 / 9)),\n      tempMax: Math.round((this.state.tempMax - 32) * (5 / 9)),\n    });\n  };\n\n  handleReturn = () => {\n    this.setState({ forecastClass: \"forecast-container-hidden\" });\n  };\n\n  handleClick = () => {\n    this.setState({ forecastClass: \"forecast-container\" });\n  };\n\n  checkRequest = () => {\n    this.state.validRequest ? true : false;\n  };\n\n  render() {\n    const {\n      sunrise,\n      sunset,\n      description,\n      wind,\n      humidity,\n      temperature,\n      tempMin,\n      tempMax,\n      country,\n      city,\n      icon,\n      celsius,\n      fahrenheit,\n      error,\n      forecastClass,\n      validRequest,\n    } = this.state;\n    const sunsriseClock = new Date(sunrise * 1000).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n    const sunsetClock = new Date(sunset * 1000).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n    const weatherCode = icon.slice(0, 2).toString();\n    let cityId = \"\";\n    if (this.props.cityId) {\n      cityId = this.props.cityId;\n    } else {\n      cityId = this.state.cityId;\n    }\n\n    if (!this.state.validRequest) {\n      this.setState({ validRequest: false });\n      return <Redirect to=\"/not-found\" />;\n    } else {\n      return (\n        <React.Fragment>\n          <div className=\"weather-container\" key={cityId}>\n            <h2>\n              {city}\n              <span> {country}</span>\n            </h2>\n            <div className=\"weather-overview\">\n              <span>\n                {temperature}\n                <button onClick={this.displayC} disabled={celsius}>\n                  째C\n                </button>\n                <button onClick={this.displayF} disabled={fahrenheit}>\n                  째F\n                </button>\n              </span>\n              <img\n                src={process.env.PUBLIC_URL + \"/img/\" + weatherCode + \".png\"}\n                placeholder=\"img\"\n                alt=\"img\"\n              />\n            </div>\n            <div id=\"weather-description\">{description}</div>\n            <ul>\n              <li>\n                <span className=\"daily-temp\">\n                  {tempMin}\n                  {celsius && \"째C\"}\n                  {celsius || \"째F\"}\n                </span>\n                Min\n              </li>\n              <li>\n                <span className=\"daily-temp\">\n                  {tempMax}\n                  {celsius && \"째C\"}\n                  {celsius || \"째F\"}\n                </span>\n                Max\n              </li>\n              <li>\n                <span>{humidity}%</span>Humidity\n              </li>\n              <li>\n                <span>{wind} mph</span>Wind\n              </li>\n              <li>\n                <span>{sunsriseClock}</span>Sunrise\n              </li>\n              <li>\n                <span>{sunsetClock.slice(0)}</span>Sunset\n              </li>\n            </ul>\n            {error && <p>error :{error}</p>}\n            <div className=\"weather-extra\" onClick={this.handleClick}>\n              <div>5-day forecast</div>\n            </div>\n          </div>\n          <Forecast\n            forecastClass={forecastClass}\n            cityId={cityId}\n            onClick={this.handleReturn}\n            celsius={celsius}\n            validRequest={this.checkRequest}\n          />\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}