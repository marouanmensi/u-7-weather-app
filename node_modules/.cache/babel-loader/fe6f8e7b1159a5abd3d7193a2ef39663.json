{"ast":null,"code":"var _jsxFileName = \"/home/enzo/dev/projects/chasacademy/current/style/src/components/Forecast.jsx\";\nimport React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport WeatherDayCard from \"./WeatherDayCard\";\n\nclass Forecast extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dailyData: [],\n      minMaxTemps: {}\n    };\n\n    this.componentDidMount = () => {\n      this.getForecast();\n    };\n\n    this.dailyValues = dailyData => {\n      let index = dailyData.findIndex(function (item, i) {\n        return item.dt_txt.endsWith(\"00:00:00\");\n      });\n      let nextDaysArray = [dailyData.slice(index, index + 8), dailyData.slice(index + 8, index + 16), dailyData.slice(index + 16, index + 24), dailyData.slice(index + 24, index + 32), dailyData.slice(index + 32)];\n      let dailyTemps = [];\n      nextDaysArray.forEach((element, index) => {\n        let dailyTemp = [];\n        let dailyDescription = [];\n        let dailyIcon = [];\n        element.forEach((element, index) => {\n          dailyTemp[index] = element[\"main\"][\"temp\"];\n          dailyDescription[index] = element[\"weather\"][\"description\"];\n          dailyIcon[index] = element[\"weather\"][\"icon\"].slice(0, 2);\n        });\n        dailyTemps[index] = dailyTemp;\n        console.log(\"dailyDescription\", dailyDescription);\n        console.log(\"dailyIcon\", dailyIcon);\n      });\n      let maxTemps = [];\n      let minTemps = [];\n      dailyTemps.forEach((element, index) => {\n        maxTemps[index] = Math.round(Math.max(...element) - 273.15);\n        minTemps[index] = Math.round(Math.min(...element) - 273.15);\n      });\n      return {\n        maxTemps,\n        minTemps\n      };\n    };\n\n    this.getForecast = () => {\n      if (this.props.cityId) {\n        // try {\n        //   const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.cityId}&appid=${config.API_KEY}`;\n        //   fetch(weatherURL)\n        //     .then((res) => res.json())\n        //     .then((data) => {\n        const data = require(`../assets/forecast.json`);\n\n        const minMaxTemps = this.dailyValues(data.list);\n        console.log(\"a\", minMaxTemps); // const dailyData = data[\"list\"];\n\n        const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"00:00:00\"));\n        this.setState({\n          dailyData,\n          minMaxTemps\n        }, () => console.log(\"STATE\", this.state));\n        console.log(\"DAILYDATA\"); // });\n        // } catch (e) {\n        //   console.log(\"Error in API request of Forecast component.\", e);\n        // }\n      }\n    };\n\n    this.weatherDaysCardsRender = (celsius, minMaxTemps) => {\n      return this.state.dailyData.map((reading, index) => /*#__PURE__*/React.createElement(WeatherDayCard, {\n        reading: reading,\n        key: index,\n        city: this.state.city,\n        celsius: celsius,\n        minTemp: minMaxTemps[\"minTemps\"][index],\n        maxTemp: minMaxTemps[\"maxTemps\"][index],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 7\n        }\n      }));\n    };\n  }\n\n  render() {\n    const {\n      minMaxTemps\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: this.props.forecastClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"go-back-arrow\",\n      onClick: this.props.onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: process.env.PUBLIC_URL + \"/img/back-arrow.png\",\n      placeholder: \"img\",\n      alt: \"img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      key: this.state.temperature,\n      className: \"cards-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, this.weatherDaysCardsRender(this.props.celsius, minMaxTemps)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"intervals-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, \"3-hour intervals\")));\n  }\n\n}\n\nexport default Forecast;","map":{"version":3,"sources":["/home/enzo/dev/projects/chasacademy/current/style/src/components/Forecast.jsx"],"names":["React","Component","config","WeatherDayCard","Forecast","state","dailyData","minMaxTemps","componentDidMount","getForecast","dailyValues","index","findIndex","item","i","dt_txt","endsWith","nextDaysArray","slice","dailyTemps","forEach","element","dailyTemp","dailyDescription","dailyIcon","console","log","maxTemps","minTemps","Math","round","max","min","props","cityId","data","require","list","filter","reading","includes","setState","weatherDaysCardsRender","celsius","map","city","render","forecastClass","onClick","process","env","PUBLIC_URL","temperature"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport WeatherDayCard from \"./WeatherDayCard\";\n\nclass Forecast extends Component {\n  state = {\n    dailyData: [],\n    minMaxTemps: {},\n  };\n\n  componentDidMount = () => {\n    this.getForecast();\n  };\n\n  dailyValues = (dailyData) => {\n    let index = dailyData.findIndex(function (item, i) {\n      return item.dt_txt.endsWith(\"00:00:00\");\n    });\n    let nextDaysArray = [\n      dailyData.slice(index, index + 8),\n      dailyData.slice(index + 8, index + 16),\n      dailyData.slice(index + 16, index + 24),\n      dailyData.slice(index + 24, index + 32),\n      dailyData.slice(index + 32),\n    ];\n    let dailyTemps = [];\n    nextDaysArray.forEach((element, index) => {\n      let dailyTemp = [];\n      let dailyDescription = [];\n      let dailyIcon = [];\n      element.forEach((element, index) => {\n        dailyTemp[index] = element[\"main\"][\"temp\"];\n        dailyDescription[index] = element[\"weather\"][\"description\"];\n        dailyIcon[index] = element[\"weather\"][\"icon\"].slice(0, 2);\n      });\n      dailyTemps[index] = dailyTemp;\n      console.log(\"dailyDescription\", dailyDescription);\n      console.log(\"dailyIcon\", dailyIcon);\n    });\n\n    let maxTemps = [];\n    let minTemps = [];\n    dailyTemps.forEach((element, index) => {\n      maxTemps[index] = Math.round(Math.max(...element) - 273.15);\n      minTemps[index] = Math.round(Math.min(...element) - 273.15);\n    });\n    return { maxTemps, minTemps };\n  };\n\n  getForecast = () => {\n    if (this.props.cityId) {\n      // try {\n      //   const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.cityId}&appid=${config.API_KEY}`;\n\n      //   fetch(weatherURL)\n      //     .then((res) => res.json())\n      //     .then((data) => {\n      const data = require(`../assets/forecast.json`);\n\n      const minMaxTemps = this.dailyValues(data.list);\n      console.log(\"a\", minMaxTemps);\n\n      // const dailyData = data[\"list\"];\n\n      const dailyData = data.list.filter((reading) =>\n        reading.dt_txt.includes(\"00:00:00\")\n      );\n      this.setState(\n        {\n          dailyData,\n          minMaxTemps,\n        },\n        () => console.log(\"STATE\", this.state)\n      );\n      console.log(\"DAILYDATA\");\n      // });\n      // } catch (e) {\n      //   console.log(\"Error in API request of Forecast component.\", e);\n      // }\n    }\n  };\n\n  weatherDaysCardsRender = (celsius, minMaxTemps) => {\n    return this.state.dailyData.map((reading, index) => (\n      <WeatherDayCard\n        reading={reading}\n        key={index}\n        city={this.state.city}\n        celsius={celsius}\n        minTemp={minMaxTemps[\"minTemps\"][index]}\n        maxTemp={minMaxTemps[\"maxTemps\"][index]}\n      />\n    ));\n  };\n\n  render() {\n    const { minMaxTemps } = this.state;\n    return (\n      <div className={this.props.forecastClass}>\n        <div id=\"go-back-arrow\" onClick={this.props.onClick}>\n          <img\n            src={process.env.PUBLIC_URL + \"/img/back-arrow.png\"}\n            placeholder=\"img\"\n            alt=\"img\"\n          />\n        </div>\n        <div key={this.state.temperature} className=\"cards-container\">\n          {this.weatherDaysCardsRender(this.props.celsius, minMaxTemps)}\n        </div>\n        <div className=\"intervals-button\">\n          <div>3-hour intervals</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}