{"ast":null,"code":"var _jsxFileName = \"/home/dev/chasacademy/current/style/src/components/Weather.jsx\";\nimport React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport Forecast from \"./Forecast\";\nimport { getCountry } from \"../services/\";\n\nclass Weather extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temperature: \"\",\n      city: \"\",\n      cityId: 2673730,\n      country: \"\",\n      humidity: \"\",\n      wind: \"\",\n      description: \"\",\n      sunrise: \"\",\n      sunset: \"\",\n      icon: \"\",\n      error: \"\"\n    };\n\n    this.getWeather = async () => {\n      // try {\n      //   let fetchUrl = \"\";\n      //   if (!this.props.cityId) {\n      //     fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.state.cityId}&appid=${config.API_KEY}`;\n      //     console.log(\"fetchUrl.using.stockholm:\", fetchUrl);\n      //   } else {\n      //     fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.props.cityId}&appid=${config.API_KEY}`;\n      //     this.setState({ cityId: this.props.cityId });\n      //     console.log(\"fetchUrl.from.props:\", fetchUrl);\n      //   }\n      //   const api = await fetch(fetchUrl);\n      //   const data = await api.json();\n      const data = require(`../assets/stockholm.json`);\n\n      if (data) {\n        this.setState({\n          city: data.name,\n          country: getCountry(data.sys.country),\n          temperature: Math.round(data.main.temp - 273.15),\n          humidity: data.main.humidity,\n          wind: data.wind.speed,\n          description: data.weather[0].description,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          icon: data.weather[0].icon,\n          error: \"\"\n        });\n      } // } catch (e) {\n      //   console.log(\"Error in getWeather function of Weather component.\", e);\n      // }\n\n    };\n  }\n\n  componentDidMount() {\n    this.getWeather();\n  }\n\n  render() {\n    const {\n      sunrise,\n      sunset,\n      description,\n      wind,\n      humidity,\n      temperature,\n      country,\n      city,\n      icon,\n      error\n    } = this.state;\n    const sunsriseClock = new Date(sunrise * 1000).toLocaleTimeString();\n    const sunsetClock = new Date(sunset * 1000).toLocaleTimeString();\n    const weatherCode = icon.slice(0, 2).toString();\n    let cityId = \"\";\n\n    if (this.props.cityId) {\n      cityId = this.props.cityId;\n    } else {\n      cityId = this.state.cityId;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: cityId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, city, \", \", country), /*#__PURE__*/React.createElement(\"img\", {\n      src: process.env.PUBLIC_URL + \"/img/\" + weatherCode + \".png\",\n      style: {\n        width: 100\n      },\n      placeholder: \"img\",\n      alt: \"img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, \"Temperature : \", temperature, \"\\xB0C / \", temperature * 9 / 5 + 32, \" \\xB0F\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, \"Description : \", description), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }, \"Humidity : \", humidity, \" %\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }, \"Wind : \", wind, \" mph\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, \"Sunrise : \", sunsriseClock), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, \"Sunset : \", sunsetClock)), error && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 19\n      }\n    }, \"error :\", error));\n  }\n\n}\n\nexport default Weather;","map":{"version":3,"sources":["/home/dev/chasacademy/current/style/src/components/Weather.jsx"],"names":["React","Component","config","Forecast","getCountry","Weather","state","temperature","city","cityId","country","humidity","wind","description","sunrise","sunset","icon","error","getWeather","data","require","setState","name","sys","Math","round","main","temp","speed","weather","componentDidMount","render","sunsriseClock","Date","toLocaleTimeString","sunsetClock","weatherCode","slice","toString","props","process","env","PUBLIC_URL","width"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport Forecast from \"./Forecast\";\nimport { getCountry } from \"../services/\";\n\nclass Weather extends Component {\n  state = {\n    temperature: \"\",\n    city: \"\",\n    cityId: 2673730,\n    country: \"\",\n    humidity: \"\",\n    wind: \"\",\n    description: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    icon: \"\",\n    error: \"\",\n  };\n\n  componentDidMount() {\n    this.getWeather();\n  }\n\n  getWeather = async () => {\n    // try {\n    //   let fetchUrl = \"\";\n    //   if (!this.props.cityId) {\n    //     fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.state.cityId}&appid=${config.API_KEY}`;\n    //     console.log(\"fetchUrl.using.stockholm:\", fetchUrl);\n    //   } else {\n    //     fetchUrl = `http://api.openweathermap.org/data/2.5/weather?id=${this.props.cityId}&appid=${config.API_KEY}`;\n    //     this.setState({ cityId: this.props.cityId });\n    //     console.log(\"fetchUrl.from.props:\", fetchUrl);\n    //   }\n    //   const api = await fetch(fetchUrl);\n    //   const data = await api.json();\n    const data = require(`../assets/stockholm.json`);\n    if (data) {\n      this.setState({\n        city: data.name,\n        country: getCountry(data.sys.country),\n        temperature: Math.round(data.main.temp - 273.15),\n        humidity: data.main.humidity,\n        wind: data.wind.speed,\n        description: data.weather[0].description,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset,\n        icon: data.weather[0].icon,\n        error: \"\",\n      });\n    }\n    // } catch (e) {\n    //   console.log(\"Error in getWeather function of Weather component.\", e);\n    // }\n  };\n\n  render() {\n    const {\n      sunrise,\n      sunset,\n      description,\n      wind,\n      humidity,\n      temperature,\n      country,\n      city,\n      icon,\n      error,\n    } = this.state;\n    const sunsriseClock = new Date(sunrise * 1000).toLocaleTimeString();\n    const sunsetClock = new Date(sunset * 1000).toLocaleTimeString();\n    const weatherCode = icon.slice(0, 2).toString();\n    let cityId = \"\";\n    if (this.props.cityId) {\n      cityId = this.props.cityId;\n    } else {\n      cityId = this.state.cityId;\n    }\n\n    return (\n      <div key={cityId}>\n        <h3>\n          {city}, {country}\n        </h3>\n\n        <img\n          src={process.env.PUBLIC_URL + \"/img/\" + weatherCode + \".png\"}\n          style={{ width: 100 }}\n          placeholder=\"img\"\n          alt=\"img\"\n        />\n        <ul>\n          <li>\n            Temperature : {temperature}°C / {(temperature * 9) / 5 + 32} °F\n          </li>\n          <li>Description : {description}</li>\n          <li>Humidity : {humidity} %</li>\n          <li>Wind : {wind} mph</li>\n          <li>Sunrise : {sunsriseClock}</li>\n          <li>Sunset : {sunsetClock}</li>\n        </ul>\n        {error && <p>error :{error}</p>}\n        {/* <Forecast cityId={cityId} /> */}\n      </div>\n    );\n  }\n}\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}