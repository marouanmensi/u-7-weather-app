{"ast":null,"code":"var _jsxFileName = \"/home/dev/chasacademy/current/style/src/components/Forecast.jsx\";\nimport React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport WeatherDayCard from \"./WeatherDayCard\";\n\nclass Forecast extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      city: null,\n      country: null,\n      latitude: null,\n      longitude: null,\n      temperature: null,\n      feels_like: null,\n      pressure: null,\n      humidity: null,\n      weatherDescription: null,\n      weatherIcon: null,\n      date: null,\n      dailyData: []\n    };\n\n    this.componentDidMount = () => {\n      this.getForecast();\n    };\n\n    this.getForecast = () => {\n      if (this.props.cityId) {\n        try {\n          const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.cityId}&appid=${config.API_KEY}`;\n          fetch(weatherURL).then(res => res.json()).then(data => {\n            // const data = require(`../assets/forecast.json`);\n            const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"));\n            this.setState({\n              dailyData: dailyData,\n              city: data.city.name,\n              country: data.city.country,\n              feels_like: data.list[0].main.feels_like,\n              pressure: data.list[0].main.pressure,\n              humidity: data.list[0].main.humidity,\n              weatherDescription: data.list[0].weather[0].description,\n              weatherIcon: data.list[0].weather[0].icon,\n              date: data.list[0].dt_txt\n            }, () => console.log(this.state));\n          });\n        } catch (e) {\n          console.log(\"Error in API request of Forecast component.\", e);\n        }\n      }\n    };\n\n    this.weatherDaysCardsRender = celsius => {\n      return this.state.dailyData.map((reading, index) => /*#__PURE__*/React.createElement(WeatherDayCard, {\n        reading: reading,\n        key: index,\n        city: this.state.city,\n        celsius: celsius,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 7\n        }\n      }));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: this.props.forecastClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"go-back-arrow\",\n      onClick: this.props.onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: process.env.PUBLIC_URL + \"/img/back-arrow.png\",\n      placeholder: \"img\",\n      alt: \"img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      key: this.state.temperature,\n      className: \"cards-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, this.weatherDaysCardsRender(this.props.celsius)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"intervals-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, \"3-hour intervals\")));\n  }\n\n}\n\nexport default Forecast;","map":{"version":3,"sources":["/home/dev/chasacademy/current/style/src/components/Forecast.jsx"],"names":["React","Component","config","WeatherDayCard","Forecast","state","city","country","latitude","longitude","temperature","feels_like","pressure","humidity","weatherDescription","weatherIcon","date","dailyData","componentDidMount","getForecast","props","cityId","weatherURL","API_KEY","fetch","then","res","json","data","list","filter","reading","dt_txt","includes","setState","name","main","weather","description","icon","console","log","e","weatherDaysCardsRender","celsius","map","index","render","forecastClass","onClick","process","env","PUBLIC_URL"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport WeatherDayCard from \"./WeatherDayCard\";\n\nclass Forecast extends Component {\n  state = {\n    city: null,\n    country: null,\n    latitude: null,\n    longitude: null,\n    temperature: null,\n    feels_like: null,\n    pressure: null,\n    humidity: null,\n    weatherDescription: null,\n    weatherIcon: null,\n    date: null,\n    dailyData: [],\n  };\n\n  componentDidMount = () => {\n    this.getForecast();\n  };\n\n  getForecast = () => {\n    if (this.props.cityId) {\n      try {\n        const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.cityId}&appid=${config.API_KEY}`;\n\n        fetch(weatherURL)\n          .then((res) => res.json())\n          .then((data) => {\n            // const data = require(`../assets/forecast.json`);\n            const dailyData = data.list.filter((reading) =>\n              reading.dt_txt.includes(\"18:00:00\")\n            );\n            this.setState(\n              {\n                dailyData: dailyData,\n                city: data.city.name,\n                country: data.city.country,\n                feels_like: data.list[0].main.feels_like,\n                pressure: data.list[0].main.pressure,\n                humidity: data.list[0].main.humidity,\n                weatherDescription: data.list[0].weather[0].description,\n                weatherIcon: data.list[0].weather[0].icon,\n                date: data.list[0].dt_txt,\n              },\n              () => console.log(this.state)\n            );\n          });\n      } catch (e) {\n        console.log(\"Error in API request of Forecast component.\", e);\n      }\n    }\n  };\n\n  weatherDaysCardsRender = (celsius) => {\n    return this.state.dailyData.map((reading, index) => (\n      <WeatherDayCard\n        reading={reading}\n        key={index}\n        city={this.state.city}\n        celsius={celsius}\n      />\n    ));\n  };\n\n  render() {\n    return (\n      <div className={this.props.forecastClass}>\n        <div id=\"go-back-arrow\" onClick={this.props.onClick}>\n          <img\n            src={process.env.PUBLIC_URL + \"/img/back-arrow.png\"}\n            placeholder=\"img\"\n            alt=\"img\"\n          />\n        </div>\n        <div key={this.state.temperature} className=\"cards-container\">\n          {this.weatherDaysCardsRender(this.props.celsius)}\n        </div>\n        <div className=\"intervals-button\">\n          <div>3-hour intervals</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}