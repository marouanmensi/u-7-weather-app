{"ast":null,"code":"var _jsxFileName = \"/home/enzo/dev/projects/chasacademy/current/style/src/components/Forecast.jsx\";\nimport React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport WeatherDayCard from \"./WeatherDayCard\";\n\nclass Forecast extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dailyData: [],\n      minTemps: [],\n      maxTemps: [],\n      descriptions: [],\n      icons: []\n    };\n\n    this.componentDidMount = () => {\n      this.getForecast();\n    };\n\n    this.dailyValues = dailyData => {\n      let index = dailyData.findIndex(function (item, i) {\n        return item.dt_txt.endsWith(\"00:00:00\");\n      });\n      let nextDaysArray = [dailyData.slice(index, index + 8), dailyData.slice(index + 8, index + 16), dailyData.slice(index + 16, index + 24), dailyData.slice(index + 24, index + 32), dailyData.slice(index + 32)];\n      let dailyTemps = [];\n      let dailyIcons = [];\n      nextDaysArray.forEach((element, index) => {\n        let dailyTemp = [];\n        let dailyIcon = [];\n        element.forEach((element, index) => {\n          dailyTemp[index] = element[\"main\"][\"temp\"];\n          dailyIcon[index] = element[\"weather\"][0][\"icon\"].slice(0, 2);\n        });\n        dailyTemps[index] = dailyTemp;\n        dailyIcons[index] = dailyIcon;\n      });\n      let maxTemps = [];\n      let minTemps = [];\n      dailyTemps.forEach((element, index) => {\n        maxTemps[index] = Math.round(Math.max(...element) - 273.15);\n        minTemps[index] = Math.round(Math.min(...element) - 273.15);\n      });\n      let icons = [];\n      dailyIcons.forEach((element, index) => {\n        icons[index] = mode(element);\n      });\n      console.log(\"ICONS\", icons);\n      let descIndex = [];\n      nextDaysArray.forEach((day, i) => {\n        let j = day.findIndex(function (item) {\n          return item[\"weather\"][0][\"icon\"].includes(icons[i].toString());\n        });\n        descIndex.push(j);\n      });\n      console.log(\"desckindex\", descIndex);\n      let descriptions = [];\n      nextDaysArray.forEach((day, index) => {\n        descriptions[index] = day[descIndex[index]][\"weather\"][0][\"description\"];\n      });\n\n      function mode(arr) {\n        let numMapping = {};\n        let greatestFreq = 0;\n        let mode;\n        arr.forEach(function findMode(number) {\n          numMapping[number] = (numMapping[number] || 0) + 1;\n\n          if (greatestFreq < numMapping[number]) {\n            greatestFreq = numMapping[number];\n            mode = number;\n          }\n        });\n        return +mode;\n      }\n\n      return {\n        maxTemps,\n        minTemps,\n        descriptions,\n        icons\n      };\n    };\n\n    this.getForecast = () => {\n      if (this.props.cityId) {\n        // try {\n        //   const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.cityId}&appid=${config.API_KEY}`;\n        //   fetch(weatherURL)\n        //     .then((res) => res.json())\n        //     .then((data) => {\n        const data = require(`../assets/forecast.json`);\n\n        const {\n          maxTemps,\n          minTemps,\n          descriptions,\n          icons\n        } = this.dailyValues(data.list); // const dailyData = data[\"list\"];\n\n        const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"00:00:00\"));\n        this.setState({\n          dailyData,\n          minTemps,\n          maxTemps,\n          descriptions,\n          icons\n        }, () => console.log(\"STATE\", this.state));\n        console.log(\"DAILYDATA\"); // });\n        // } catch (e) {\n        //   console.log(\"Error in API request of Forecast component.\", e);\n        // }\n      }\n    };\n\n    this.weatherDaysCardsRender = (celsius, minTemps, maxTemps, descriptions, icons) => {\n      return this.state.dailyData.map((reading, index) => /*#__PURE__*/React.createElement(WeatherDayCard, {\n        reading: reading,\n        key: index,\n        city: this.state.city,\n        celsius: celsius,\n        minTemp: minTemps[index],\n        maxTemp: maxTemps[index],\n        descriptions: descriptions[index],\n        icons: icons[index],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 7\n        }\n      }));\n    };\n  }\n\n  render() {\n    const {\n      minTemps,\n      maxTemps,\n      descriptions,\n      icons\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: this.props.forecastClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"go-back-arrow\",\n      onClick: this.props.onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: process.env.PUBLIC_URL + \"/img/back-arrow.png\",\n      placeholder: \"img\",\n      alt: \"img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      key: this.state.temperature,\n      className: \"cards-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, this.weatherDaysCardsRender(this.props.celsius, minTemps, maxTemps, descriptions, icons)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"intervals-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }\n    }, \"3-hour intervals\")));\n  }\n\n}\n\nexport default Forecast;","map":{"version":3,"sources":["/home/enzo/dev/projects/chasacademy/current/style/src/components/Forecast.jsx"],"names":["React","Component","config","WeatherDayCard","Forecast","state","dailyData","minTemps","maxTemps","descriptions","icons","componentDidMount","getForecast","dailyValues","index","findIndex","item","i","dt_txt","endsWith","nextDaysArray","slice","dailyTemps","dailyIcons","forEach","element","dailyTemp","dailyIcon","Math","round","max","min","mode","console","log","descIndex","day","j","includes","toString","push","arr","numMapping","greatestFreq","findMode","number","props","cityId","data","require","list","filter","reading","setState","weatherDaysCardsRender","celsius","map","city","render","forecastClass","onClick","process","env","PUBLIC_URL","temperature"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport config from \"../config.json\";\nimport WeatherDayCard from \"./WeatherDayCard\";\n\nclass Forecast extends Component {\n  state = {\n    dailyData: [],\n    minTemps: [],\n    maxTemps: [],\n    descriptions: [],\n    icons: [],\n  };\n\n  componentDidMount = () => {\n    this.getForecast();\n  };\n\n  dailyValues = (dailyData) => {\n    let index = dailyData.findIndex(function (item, i) {\n      return item.dt_txt.endsWith(\"00:00:00\");\n    });\n    let nextDaysArray = [\n      dailyData.slice(index, index + 8),\n      dailyData.slice(index + 8, index + 16),\n      dailyData.slice(index + 16, index + 24),\n      dailyData.slice(index + 24, index + 32),\n      dailyData.slice(index + 32),\n    ];\n    let dailyTemps = [];\n    let dailyIcons = [];\n    nextDaysArray.forEach((element, index) => {\n      let dailyTemp = [];\n      let dailyIcon = [];\n      element.forEach((element, index) => {\n        dailyTemp[index] = element[\"main\"][\"temp\"];\n        dailyIcon[index] = element[\"weather\"][0][\"icon\"].slice(0, 2);\n      });\n      dailyTemps[index] = dailyTemp;\n      dailyIcons[index] = dailyIcon;\n    });\n\n    let maxTemps = [];\n    let minTemps = [];\n    dailyTemps.forEach((element, index) => {\n      maxTemps[index] = Math.round(Math.max(...element) - 273.15);\n      minTemps[index] = Math.round(Math.min(...element) - 273.15);\n    });\n    let icons = [];\n    dailyIcons.forEach((element, index) => {\n      icons[index] = mode(element);\n    });\n    console.log(\"ICONS\", icons);\n    let descIndex = [];\n    nextDaysArray.forEach((day, i) => {\n      let j = day.findIndex(function (item) {\n        return item[\"weather\"][0][\"icon\"].includes(icons[i].toString());\n      });\n      descIndex.push(j);\n    });\n    console.log(\"desckindex\", descIndex);\n    let descriptions = [];\n    nextDaysArray.forEach((day, index) => {\n      descriptions[index] = day[descIndex[index]][\"weather\"][0][\"description\"];\n    });\n\n    function mode(arr) {\n      let numMapping = {};\n      let greatestFreq = 0;\n      let mode;\n      arr.forEach(function findMode(number) {\n        numMapping[number] = (numMapping[number] || 0) + 1;\n\n        if (greatestFreq < numMapping[number]) {\n          greatestFreq = numMapping[number];\n          mode = number;\n        }\n      });\n      return +mode;\n    }\n    return { maxTemps, minTemps, descriptions, icons };\n  };\n\n  getForecast = () => {\n    if (this.props.cityId) {\n      // try {\n      //   const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.cityId}&appid=${config.API_KEY}`;\n\n      //   fetch(weatherURL)\n      //     .then((res) => res.json())\n      //     .then((data) => {\n      const data = require(`../assets/forecast.json`);\n\n      const { maxTemps, minTemps, descriptions, icons } = this.dailyValues(\n        data.list\n      );\n\n      // const dailyData = data[\"list\"];\n\n      const dailyData = data.list.filter((reading) =>\n        reading.dt_txt.includes(\"00:00:00\")\n      );\n      this.setState(\n        {\n          dailyData,\n          minTemps,\n          maxTemps,\n          descriptions,\n          icons,\n        },\n        () => console.log(\"STATE\", this.state)\n      );\n      console.log(\"DAILYDATA\");\n      // });\n      // } catch (e) {\n      //   console.log(\"Error in API request of Forecast component.\", e);\n      // }\n    }\n  };\n\n  weatherDaysCardsRender = (\n    celsius,\n    minTemps,\n    maxTemps,\n    descriptions,\n    icons\n  ) => {\n    return this.state.dailyData.map((reading, index) => (\n      <WeatherDayCard\n        reading={reading}\n        key={index}\n        city={this.state.city}\n        celsius={celsius}\n        minTemp={minTemps[index]}\n        maxTemp={maxTemps[index]}\n        descriptions={descriptions[index]}\n        icons={icons[index]}\n      />\n    ));\n  };\n\n  render() {\n    const { minTemps, maxTemps, descriptions, icons } = this.state;\n    return (\n      <div className={this.props.forecastClass}>\n        <div id=\"go-back-arrow\" onClick={this.props.onClick}>\n          <img\n            src={process.env.PUBLIC_URL + \"/img/back-arrow.png\"}\n            placeholder=\"img\"\n            alt=\"img\"\n          />\n        </div>\n        <div key={this.state.temperature} className=\"cards-container\">\n          {this.weatherDaysCardsRender(\n            this.props.celsius,\n            minTemps,\n            maxTemps,\n            descriptions,\n            icons\n          )}\n        </div>\n        <div className=\"intervals-button\">\n          <div>3-hour intervals</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}