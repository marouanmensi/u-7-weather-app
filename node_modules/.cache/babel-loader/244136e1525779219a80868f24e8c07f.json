{"ast":null,"code":"var _jsxFileName = \"/home/dev/chasacademy/weather-app/src/components/Forecast.jsx\";\nimport React, { Component } from \"react\";\nimport config from \"../config.json\";\n\nclass Forecast extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      city: null,\n      country: null,\n      latitude: null,\n      longitude: null,\n      temperature: null,\n      feels_like: null,\n      pressure: null,\n      humidity: null,\n      weatherDescription: null,\n      weatherIcon: null,\n      date: null,\n      dailyData: []\n    };\n\n    this.componentDidMount = () => {\n      const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?q=stockholm,sweden&appid=${config.API_KEY}`;\n      fetch(weatherURL).then(res => res.json()).then(data => {\n        const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"));\n        this.setState({\n          dailyData: dailyData,\n          city: data.city.name,\n          country: data.city.country,\n          temperature: data.list[0].main.temp,\n          feels_like: data.list[0].main.feels_like,\n          pressure: data.list[0].main.pressure,\n          humidity: data.list[0].main.humidity,\n          weatherDescription: data.list[0].weather[0].description,\n          weatherIcon: data.list[0].weather[0].icon,\n          date: data.list[0].dt_txt\n        }, () => console.log(this.state));\n      });\n    };\n\n    this.weatherDaysCardsRender = () => {\n      return this.state.dailyData.map((reading, index) => /*#__PURE__*/React.createElement(WeatherDayCard, {\n        reading: reading,\n        key: index,\n        city: this.state.city,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 7\n        }\n      }));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, \"5 Days Forecast\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, this.weatherDaysCardsRender()));\n  }\n\n}\n\nexport default Forecast;","map":{"version":3,"sources":["/home/dev/chasacademy/weather-app/src/components/Forecast.jsx"],"names":["React","Component","config","Forecast","state","city","country","latitude","longitude","temperature","feels_like","pressure","humidity","weatherDescription","weatherIcon","date","dailyData","componentDidMount","weatherURL","API_KEY","fetch","then","res","json","data","list","filter","reading","dt_txt","includes","setState","name","main","temp","weather","description","icon","console","log","weatherDaysCardsRender","map","index","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport config from \"../config.json\";\n\nclass Forecast extends Component {\n  state = {\n    city: null,\n    country: null,\n    latitude: null,\n    longitude: null,\n    temperature: null,\n    feels_like: null,\n    pressure: null,\n    humidity: null,\n    weatherDescription: null,\n    weatherIcon: null,\n    date: null,\n    dailyData: [],\n  };\n\n  componentDidMount = () => {\n    const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?q=stockholm,sweden&appid=${config.API_KEY}`;\n\n    fetch(weatherURL)\n      .then((res) => res.json())\n      .then((data) => {\n        const dailyData = data.list.filter((reading) =>\n          reading.dt_txt.includes(\"18:00:00\")\n        );\n        this.setState(\n          {\n            dailyData: dailyData,\n            city: data.city.name,\n            country: data.city.country,\n            temperature: data.list[0].main.temp,\n            feels_like: data.list[0].main.feels_like,\n            pressure: data.list[0].main.pressure,\n            humidity: data.list[0].main.humidity,\n            weatherDescription: data.list[0].weather[0].description,\n            weatherIcon: data.list[0].weather[0].icon,\n            date: data.list[0].dt_txt,\n          },\n          () => console.log(this.state)\n        );\n      });\n  };\n\n  weatherDaysCardsRender = () => {\n    return this.state.dailyData.map((reading, index) => (\n      <WeatherDayCard reading={reading} key={index} city={this.state.city} />\n    ));\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>5 Days Forecast</h1>\n        <div>{this.weatherDaysCardsRender()}</div>\n      </div>\n    );\n  }\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}