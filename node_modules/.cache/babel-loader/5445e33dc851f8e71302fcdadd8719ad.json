{"ast":null,"code":"var _jsxFileName = \"/home/enzo/dev/projects/chasacademy/current/style/src/components/HourlyWeather.jsx\";\nimport React, { Component } from \"react\";\nimport \"../hourlyWeather.css\";\nimport moment from \"moment\";\nimport config from \"../config.json\";\nimport { getCountry } from \"../services/citiesService\";\nimport { LineChart, AreaChart, Area, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\n\nclass HourlyWeather extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fullData: [],\n      city: \"\",\n      country: \"\",\n      celsius: true,\n      fahrenheit: false,\n      temps: [],\n      weatherChartsData: {}\n    };\n\n    this.getForecast = celsius => {\n      if (this.props.match.params.id) {\n        try {\n          const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.match.params.id}&appid=${config.API_KEY}`;\n          fetch(weatherURL).then(res => res.json()).then(data => {\n            // const data = require(`../assets/forecast.json`);\n            const fullData = data[\"list\"];\n            const city = data[\"city\"][\"name\"];\n            const country = getCountry(data[\"city\"][\"country\"]);\n            this.setState({\n              fullData,\n              city,\n              country\n            });\n            this.getTemps(fullData, celsius);\n          });\n        } catch (e) {\n          console.log(\"Error in API request of Forecast component.\", e);\n        }\n      }\n    };\n\n    this.weather3Hours = () => {\n      const interval = this.state.fullData.map((full, index) => {\n        let newDate = new Date();\n        const weekday = full.dt * 1000;\n        newDate.setTime(weekday);\n        const icon = full.weather[0].icon.slice(0, 2).toString();\n        const imgURL = process.env.PUBLIC_URL + \"/img/\" + icon + \".png\";\n        return this.fullWeatherDetailRender(newDate, full, imgURL, this.state.celsius, index);\n      });\n      return interval;\n    };\n\n    this.fullWeatherDetailRender = (newDate, full, imgURL, celsius, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"data-time\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        className: \"info-day\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }\n      }, moment(newDate).format(\"dddd\")), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"text-muted\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }\n      }, moment(newDate).format(\"MMMM Do\")), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"hour\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }\n      }, moment(newDate).format(\"LT\"))), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"conditions\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }\n      }, full.weather[0].description), /*#__PURE__*/React.createElement(\"img\", {\n        className: \"weatherIcon\",\n        src: imgURL,\n        alt: \"weather icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"temp\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      }, celsius && Math.round(full.main.temp - 272.15), celsius && \"°C\", celsius || Math.round(full.main.temp * 9 / 5 - 459.67), celsius || \"°F\")), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"Humidity\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      }, \"Humidity: \", full.main.humidity, \" %\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"windSpeed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      }, \"Wind: \", full.wind.speed, \" kmh \")));\n    };\n\n    this.displayF = () => {\n      this.setState({\n        celsius: false,\n        fahrenheit: true\n      });\n      this.getForecast(false);\n    };\n\n    this.displayC = () => {\n      this.setState({\n        celsius: true,\n        fahrenheit: false\n      });\n      this.getForecast(true);\n    };\n\n    this.getTemps = (fullData, celsius) => {\n      let temps = [];\n      fullData.forEach((full, index) => {\n        temps[index] = {\n          temperature: celsius === \"true\" || celsius ? Math.round(full.main.temp - 272.15) : Math.round(full.main.temp * 9 / 5 - 459.67),\n          name: moment(full.dt_txt).format(\"dddd\")\n        };\n      });\n      this.setState({\n        temps\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.match.params.celsius === \"false\") {\n      this.setState({\n        celsius: false,\n        fahrenheit: true\n      });\n    }\n\n    this.getForecast(this.state.celsius);\n  }\n\n  render() {\n    const weatherChartsData = this.state.temps;\n    const {\n      celsius,\n      fahrenheit,\n      city,\n      country\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"main\", {\n      className: \"home-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"details-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }\n    }, city, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }, country)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.displayC,\n      disabled: celsius,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, \"\\xB0C\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.displayF,\n      disabled: fahrenheit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }, \"\\xB0F\")), /*#__PURE__*/React.createElement(AreaChart, {\n      width: 900,\n      height: 300,\n      data: weatherChartsData,\n      margin: {\n        top: 10,\n        right: 30,\n        left: 0,\n        bottom: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      stroke: \"white\",\n      interval: 8,\n      padding: {\n        left: 2,\n        right: 2\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      stroke: \"white\",\n      domain: [\"dataMin\", \"dataMax + 3\"],\n      padding: {\n        top: 1,\n        bottom: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"temperature\",\n      stroke: \"#44337a\",\n      fill: \"#44337a\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"weather-hours\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }\n    }, this.weather3Hours())));\n  }\n\n}\n\nexport default HourlyWeather;","map":{"version":3,"sources":["/home/enzo/dev/projects/chasacademy/current/style/src/components/HourlyWeather.jsx"],"names":["React","Component","moment","config","getCountry","LineChart","AreaChart","Area","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","HourlyWeather","state","fullData","city","country","celsius","fahrenheit","temps","weatherChartsData","getForecast","props","match","params","id","weatherURL","API_KEY","fetch","then","res","json","data","setState","getTemps","e","console","log","weather3Hours","interval","map","full","index","newDate","Date","weekday","dt","setTime","icon","weather","slice","toString","imgURL","process","env","PUBLIC_URL","fullWeatherDetailRender","format","description","Math","round","main","temp","humidity","wind","speed","displayF","displayC","forEach","temperature","name","dt_txt","componentDidMount","render","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"../hourlyWeather.css\";\nimport moment from \"moment\";\nimport config from \"../config.json\";\nimport { getCountry } from \"../services/citiesService\";\nimport {\n  LineChart,\n  AreaChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n\nclass HourlyWeather extends Component {\n  state = {\n    fullData: [],\n    city: \"\",\n    country: \"\",\n    celsius: true,\n    fahrenheit: false,\n    temps: [],\n    weatherChartsData: {},\n  };\n\n  componentDidMount() {\n    if (this.props.match.params.celsius === \"false\") {\n      this.setState({ celsius: false, fahrenheit: true });\n    }\n    this.getForecast(this.state.celsius);\n  }\n  getForecast = (celsius) => {\n    if (this.props.match.params.id) {\n      try {\n        const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?id=${this.props.match.params.id}&appid=${config.API_KEY}`;\n        fetch(weatherURL)\n          .then((res) => res.json())\n          .then((data) => {\n            // const data = require(`../assets/forecast.json`);\n            const fullData = data[\"list\"];\n            const city = data[\"city\"][\"name\"];\n            const country = getCountry(data[\"city\"][\"country\"]);\n            this.setState({\n              fullData,\n              city,\n              country,\n            });\n            this.getTemps(fullData, celsius);\n          });\n      } catch (e) {\n        console.log(\"Error in API request of Forecast component.\", e);\n      }\n    }\n  };\n\n  weather3Hours = () => {\n    const interval = this.state.fullData.map((full, index) => {\n      let newDate = new Date();\n      const weekday = full.dt * 1000;\n      newDate.setTime(weekday);\n      const icon = full.weather[0].icon.slice(0, 2).toString();\n      const imgURL = process.env.PUBLIC_URL + \"/img/\" + icon + \".png\";\n      return this.fullWeatherDetailRender(\n        newDate,\n        full,\n        imgURL,\n        this.state.celsius,\n        index\n      );\n    });\n    return interval;\n  };\n\n  fullWeatherDetailRender = (newDate, full, imgURL, celsius, index) => {\n    return (\n      <div key={index} className=\"container\">\n        <div className=\"info\">\n          <div className=\"data-time\">\n            <h3 className=\"info-day\">{moment(newDate).format(\"dddd\")}</h3>\n            <p className=\"text-muted\">{moment(newDate).format(\"MMMM Do\")}</p>\n            <p className=\"hour\">{moment(newDate).format(\"LT\")}</p>\n          </div>\n          <p className=\"conditions\">{full.weather[0].description}</p>\n          <img className=\"weatherIcon\" src={imgURL} alt=\"weather icon\"></img>\n          <p className=\"temp\">\n            <span>\n              {celsius && Math.round(full.main.temp - 272.15)}\n              {celsius && \"°C\"}\n              {celsius || Math.round((full.main.temp * 9) / 5 - 459.67)}\n              {celsius || \"°F\"}\n            </span>\n          </p>\n          <p className=\"Humidity\">Humidity: {full.main.humidity} %</p>\n          <p className=\"windSpeed\">Wind: {full.wind.speed} kmh </p>\n        </div>\n      </div>\n    );\n  };\n\n  displayF = () => {\n    this.setState({\n      celsius: false,\n      fahrenheit: true,\n    });\n    this.getForecast(false);\n  };\n\n  displayC = () => {\n    this.setState({\n      celsius: true,\n      fahrenheit: false,\n    });\n    this.getForecast(true);\n  };\n\n  getTemps = (fullData, celsius) => {\n    let temps = [];\n    fullData.forEach((full, index) => {\n      temps[index] = {\n        temperature:\n          celsius === \"true\" || celsius\n            ? Math.round(full.main.temp - 272.15)\n            : Math.round((full.main.temp * 9) / 5 - 459.67),\n        name: moment(full.dt_txt).format(\"dddd\"),\n      };\n    });\n    this.setState({ temps });\n  };\n\n  render() {\n    const weatherChartsData = this.state.temps;\n    const { celsius, fahrenheit, city, country } = this.state;\n    return (\n      <main className=\"home-container\">\n        <div className=\"details-container\">\n          <h2>\n            {city}\n            <span>{country}</span>\n          </h2>\n          <div>\n            <button onClick={this.displayC} disabled={celsius}>\n              °C\n            </button>\n            <button onClick={this.displayF} disabled={fahrenheit}>\n              °F\n            </button>\n          </div>\n          <AreaChart\n            width={900}\n            height={300}\n            data={weatherChartsData}\n            margin={{\n              top: 10,\n              right: 30,\n              left: 0,\n              bottom: 0,\n            }}\n          >\n            <XAxis\n              dataKey=\"name\"\n              stroke={\"white\"}\n              interval={8}\n              padding={{ left: 2, right: 2 }}\n            />\n            <YAxis\n              stroke={\"white\"}\n              domain={[\"dataMin\", \"dataMax + 3\"]}\n              padding={{ top: 1, bottom: 1 }}\n            />\n            <Tooltip />\n            <Area\n              type=\"monotone\"\n              dataKey=\"temperature\"\n              stroke=\"#44337a\"\n              fill=\"#44337a\"\n            />\n          </AreaChart>\n\n          <div className=\"weather-hours\">{this.weather3Hours()}</div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default HourlyWeather;\n"]},"metadata":{},"sourceType":"module"}